*	Copy Nuget packages to bin folder when building .NET Standard project:
		-	Add this line to the project file inside the <PropertyGroup> tag;
				<CopyLocalLockFileAssemblies>true</CopyLocalLockFileAssemblies>

		-	e.g.
			  <PropertyGroup>
				<TargetFramework>netstandard2.0</TargetFramework>
				<CopyLocalLockFileAssemblies>true</CopyLocalLockFileAssemblies>
			  </PropertyGroup>

*	Porting .NET Framework code to .NET Core:
	-	https://devblogs.microsoft.com/dotnet/announcing-the-windows-compatibility-pack-for-net-core/?WT.mc_id=-blog-scottha

*	Port your code from .NET Framework to .NET Core:
	-	https://docs.microsoft.com/en-us/dotnet/core/porting/

*	Choosing between .NET Core and .NET Framework for server apps:
	-	https://docs.microsoft.com/en-us/dotnet/standard/choosing-core-framework-server

*	An Introduction to NuGet:
	-	https://docs.microsoft.com/en-us/nuget/hosting-packages/overview

*	Hosting your own local NuGet feed:
	-	https://docs.microsoft.com/en-us/nuget/hosting-packages/overview

*	Organizations on NuGet:
	-	https://devblogs.microsoft.com/nuget/organizations-on-nuget-org/
	-	https://docs.microsoft.com/en-us/nuget/nuget-org/organizations-on-nuget-org#transform-existing-account-to-an-organization

*	Quickstart: Create and publish a NuGet package using Visual Studio (.NET Standard, Windows only):
	-	https://docs.microsoft.com/en-us/nuget/quickstart/create-and-publish-a-package-using-visual-studio
		1.	Set the package properties in the project settings.
		2.	Switch to Release build configuration.
		3.	Right click project and click Pack, which will create the nupkg for the project.
		4.	Login to NuGet and create an Key (if you don't have one already): https://www.nuget.org/account/apikeys
			-	NuGet API Key: oy2jrak37o4ba6wbdgcanvuf2qyqyhgu5epmplqckqgxja
		5.	Publish Package with .NET CLI (Command Line Interface):
			-	Open a command prompt and change directory to the folder where the nupkg file has been created.
			-	Run the following command and just replacing the key with your own key:
					dotnet nuget push NKit.Standard.1.3.0.nupkg -k oy2jrak37o4ba6wbdgcanvuf2qyqyhgu5epmplqckqgxja -s https://api.nuget.org/v3/index.json
		6.	Publish the package with Nuget Push:
			-	Open a command prompt and change directory to the folder where the nupkg file has been created.
			-	Run the following command and just replacing the key with your own key:
					nuget push NKit.Standard.1.3.0.nupkg oy2jrak37o4ba6wbdgcanvuf2qyqyhgu5epmplqckqgxja -Source https://api.nuget.org/v3/index.json


*	Create and use NuGet from your DevOps organization:
	-	https://docs.microsoft.com/en-us/azure/devops/artifacts/nuget/nuget-exe?view=azure-devops

	-	Steps:
		-	Add feed to NuGet: nuget.exe sources Add -Name "Whatsapp-Check-In-Packages" -Source "https://pkgs.dev.azure.com/nacelleaviation/_packaging/Whatsapp-Check-In-Packages/nuget/v3/index.json
		-	Download Credential Providers: replace the {org_name} with the name of your Organization:
			-	https://pkgs.dev.azure.com/{org_name}/_apis/public/nuget/client/CredentialProviderBundle.zip
				-	e.g. https://pkgs.dev.azure.com/nacelleaviation/_apis/public/nuget/client/CredentialProviderBundle.zip
		-	Add the directory where the nuget.exe lives to your Path environment variable.
		-	Publish the NuGet package to the feed: a NuGet package cannot exist in Nuget.org if you want to publish your DevOps feed.
			-	nuget.exe push -Source "Whatsapp-Check-In-Packages" -ApiKey AzureDevOps NKit.Standard.1.3.0.nupkg
		-	Consume NuGet packages in Visual Studio
			-	https://docs.microsoft.com/en-us/azure/devops/artifacts/nuget/consume?view=azure-devops
			-	Steps: 
				-	In Visual Studio: Tools -> Nuget Package Manager -> Sources -> Add a Source using the URL Provided in DevOps
				-	When opening the NuGet Package Manager: switch from the NuGet.org Package Source to your source to view and download your packages.
