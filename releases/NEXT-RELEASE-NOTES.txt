*   Added option to the FtpClient UploadFile and DownloadFile methods to enable or disable SSL for the FTP request.
*   Moved all the settings related classes from the Standard library to the Windows library because Core library will implement settings differently i.e. via Options pattern. 
*   In NKit.Core, fixed the EntityFrameworkExtensionsCore Set in method for dynamic types to prevent ambiguious error exception where it cannot find the correct generic Set overload method on DbContext.
*   Implemented ControllerInputFormatter to allow configuring controllers to allow receiving of plain text or any of the media types specified in the constructor of this class.
*   Added utility methods in the Settings class to read specific settings sections from the appsettings.json file and also register them onfigurations to make them accessible to the services collection.
*   Implemented NKitBaseModel that can be inherrited by any models in an app.
*   Implemented NKitLogEntry model that is used by the LinqFunnelContextCore to log exceptions and info to the database NKitLogEntry which needs to be registered by underlying DbContext
    as a DbSet in the application using the NKit.
*   Added exception handling middleware which logs to the AppLogger as well as to the database in the NKitLogEntry table.

*   Changed the GetEntityType in the WebApiRestServiceControllerCore to also look for the entity type in the current assembly NKit.Core.dll in the default core Rest Models Namespace.
    This would need to happen if the consumer is trying to read/write default models/entities to the database like the NKitLogEntry.
*   Added logging setting LogToNKitLogEntryDatabaseTable to make it configurable as to whether or not the NKitDbContextRepository should log to the database.
*   Implemented Logging options in the NKitDbContextRepository to check whether or logging to the database is enabled or not.
*   Consolidated the GetEntities and GetEntitiesByField action on the NKitWebApiController to a single action that performs both functions depending on whether the searchBy query parameter is specified.

*   Upgraded some of the System. references in the NKit.Standard libraty to match the .NET references to prevent the downgrade errors when publishing a self-contained .NET Core App.
*   Added writing of all the settings to the console in the NKitApplication.
*   Removed the OnConfiguring method in the NKitDbContext class, to allow the consumer class specify the configuration i.e. to specify the provider when calling the UseSqlServer method.

*   Implemented NKitEmailService.
*   Implemented custom Console logging provider which changes the colors of information, error and warning messages.
*   Added NKitGeneralSettings default settings class.
*   Added EventId and EventName to NKitLogEntry model i.e. database.
*   Added Console logging settings to make the colors used in the console logger configurable e.g. DardRed for Errors, Red for Critical, Yellow for Warnings, Green for Information, Blue for debug.
*   Implemented NKitHttpExceptionResponse model to always return this object on exceptions handled by the NKitHttpExceptionHandlerMiddleware based on the content type specified when throwing a NKitHttpStatusCodeException.
*   Implemented serializer type to be configurable for the NKitWebApiController which it will use to serialize and deserialize requests and responses. This is set in the NKitWebApiSettings.
*   Implemented configurable ResponseContentType for the NKitWebApiController which it sets on responses. This is set in the NKitWebApiSettings.
*   Implemented method in the MimeContentType to get the content type from the SerializerType.

*   TODO: Implement logging of NKitHttpExceptionResponse to the database.