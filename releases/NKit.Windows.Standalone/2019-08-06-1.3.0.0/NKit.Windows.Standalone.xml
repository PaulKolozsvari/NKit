<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NKit.Windows.Standalone</name>
    </assembly>
    <members>
        <member name="M:NKit.Data.DataShaper.IncrementUnicodeString(System.String,System.Nullable{System.Char},System.Nullable{System.Char},System.Collections.Generic.List{System.Char})">
            <summary>
            Increments a string by treating it like a number and increments it as per UTF-16 table (default .NET encoding) e.g. ABC becomes ABD.
            Default .NET encoding for a char is UTF-16 (2 byte/16 bit)
            FYI: http://csharpindepth.com/Articles/General/Unicode.aspx
            </summary>
            <param name="input">The input string to be incremented.</param>
            <param name="minimumChar">The minimum character to be allowed in the range. Used in combination with the maximum char, it allows you to set a unicode character boundary for each character. If set to null it defaults to char.MinValue.</param>
            <param name="maximumChar">The maximum character to be allowed in the range. Used in combination with the minimum char, it allows you to set a unicode character boundary for each character. If set to null it defaults to char.MaxValue.</param>
            <param name="validCharacters"></param>
            <returns></returns>
        </member>
        <member name="M:NKit.Data.DataShaper.ValidateInputUnicodeStringForIncrement(System.String,System.Nullable{System.Char},System.Nullable{System.Char},System.Collections.Generic.List{System.Char})">
            <summary>
            Validates that an input string for incrementing is valid: that it does not contain invalid characters. 
            Also that the minimum char is smaller than the maximum char. Lastly that the minimum and maximum characters are not invalid characters.
            </summary>
            <param name="input">The input string to validate.</param>
            <param name="minimumChar">The minimum character.</param>
            <param name="maximumChar">The maximum character.</param>
            <param name="validCharacters">The list of valid characters.</param>
        </member>
        <member name="M:NKit.Data.DataShaper.RollOverString(System.String,System.Char,System.Int32)">
            <summary>
            Rolls over a string as part of the string increment algorithm e.g. 1A becomes 20.
            </summary>
            <param name="input">The input string to roll over.</param>
            <param name="minimumChar">The minimum character in the unicode table/range to inckude in the roll over e.g. if input is 1A and and minimum character is 0, then the result will be 20.</param>
            <param name="currentCharIndex">The current index of the charectsr we're working on for incrementing. This is to check if it is the first character, in which case an extra character needs to be prepended.</param>
            <returns></returns>
        </member>
        <member name="M:NKit.Data.DataShaper.IsUnicodeStringGreaterThan(System.String,System.String)">
            <summary>
            Compares two strings, by treating them like numbers as per the UTF/ASCII table i.e. ABC is smaller than ABD.
            Default .NET encoding for a char is UTF-16 (2 byte/16 bit)
            FYI: http://csharpindepth.com/Articles/General/Unicode.aspx
            </summary>
            <param name="input">The input string in question.</param>
            <param name="toCompareAgainst">The string to compare the input string to.</param>
            <returns>Result of the comparison.</returns>
        </member>
        <member name="M:NKit.Data.DataShaper.StringContainsInvalidCharacters(System.String,System.Collections.Generic.List{System.Char})">
            <summary>
            Checks whether a string contains characters that are not in the provided list of valid characters.
            </summary>
            <param name="input">The input string to be checked.</param>
            <param name="validCharacters">The list of characters that are valid i.e. any character in the input that is not in this list is invalid. If a null is passed, the result of this method will always be false.</param>
            <returns>Returns a bool indicating whether or not the input string contains invalid characters i.e. characters that are not included in the validCharacters list.</returns>
        </member>
        <member name="M:NKit.Data.DataShaper.GetUnicodeStringRange(System.String,System.String,System.Nullable{System.Char},System.Nullable{System.Char},System.Collections.Generic.List{System.Char})">
            <summary>
            Returns a range of unicode strings from the start string to the end string 
            For example, setting the start string to 1A and the end string to 2F it will return a range of: 1A, 1B, 1C ... 1Z, 20, 21, 22 ... 29, 2A, 2B, 2C ... 2F.
            </summary>
            <param name="startString">The start of the string range.</param>
            <param name="endString">The end of the string range.</param>
            <param name="validCharacters">A list of characters that will considered valid. Any characters outside of this list will not be included in the range. If this parameter is set to null, then all characters in the UTF-16 table are valid and included in the result range.</param>
            <returns>Returns the range of unicode (UTF-16) strings as a list.</returns>
        </member>
        <member name="F:NKit.Data.DB.SQLQuery.ComparisonOperator.EQUALS">
            <summary>
            =
            </summary>
        </member>
        <member name="F:NKit.Data.DB.SQLQuery.ComparisonOperator.GREATER_THAN">
            <summary>
            >
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:NKit.Data.DB.SQLQuery.ComparisonOperator.LESS_THAN" -->
        <member name="F:NKit.Data.DB.SQLQuery.ComparisonOperator.GREATER_THAN_OR_EQUAL_TO">
            <summary>
            >=
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:NKit.Data.DB.SQLQuery.ComparisonOperator.LESS_THAN_OR_EQUAL_TO" -->
        <!-- Badly formed XML comment ignored for member "F:NKit.Data.DB.SQLQuery.ComparisonOperator.NOT_EQUAL_TO_ANGLE_BRACKETS" -->
        <member name="F:NKit.Data.DB.SQLQuery.ComparisonOperator.NOT_EQUAL_TO">
            <summary>
            !=
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:NKit.Data.DB.SQLQuery.ComparisonOperator.NOT_LESS_THAN" -->
        <member name="F:NKit.Data.DB.SQLQuery.ComparisonOperator.NOT_GREATER_THAN">
            <summary>
            !>
            </summary>
        </member>
        <member name="F:NKit.Data.DB.SQLQuery.ComparisonOperator.IS">
            <summary>
            IS
            </summary>
        </member>
        <member name="F:NKit.Data.DB.SQLQuery.ComparisonOperator.IS_NOT">
            <summary>
            IS NOT
            </summary>
        </member>
        <member name="T:NKit.Data.DB.SQLQuery.WhereClauseComparisonOperator">
            <summary>
            http://msdn.microsoft.com/en-us/library/ms173290(v=sql.90).aspx
            </summary>
        </member>
        <member name="T:NKit.Data.DB.SQLQuery.WhereClauseLogicalOperator">
            <summary>
            http://msdn.microsoft.com/en-us/library/ms173290(v=sql.90).aspx
            </summary>
        </member>
        <member name="M:NKit.Data.DB.DatabaseTableColumnWindows.#ctor(System.Data.DataRow)">
            <summary>
            
            </summary>
            <param name="schemaRow">The DataRow retrieved from a database schema containing information about this column.</param>
        </member>
        <member name="M:NKit.Data.DB.DatabaseTableWindows.#ctor(System.Data.DataRow,System.String)">
            <summary>
            
            </summary>
            <param name="schemaRow">The DataRow retrieved from a database schema containing information about this column.</param>
        </member>
        <member name="P:NKit.Data.DB.DatabaseTableWindows.ChildrenTables">
            <summary>
            Contains the children table names (keys) and a collection of foreign keys (values) that are mapped to this table's primary key.
            </summary>
        </member>
        <member name="P:NKit.Data.DB.LINQ.LinqFunnelChangeResultWindows.Function">
            <summary>
            The function which was being performed.
            </summary>
        </member>
        <member name="P:NKit.Data.DB.LINQ.LinqFunnelChangeResultWindows.DateChanged">
            <summary>
            The date on which the change was made.
            </summary>
        </member>
        <member name="P:NKit.Data.DB.LINQ.LinqFunnelChangeResultWindows.EntityChanged">
            <summary>
            The entity on which the change was made.
            </summary>
        </member>
        <member name="P:NKit.Data.DB.LINQ.LinqFunnelChangeResultWindows.FieldChanged">
            <summary>
            The field on the entity which was changed.
            </summary>
        </member>
        <member name="P:NKit.Data.DB.LINQ.LinqFunnelChangeResultWindows.OriginalValue">
            <summary>
            The original value of the field which was changed on the entity.
            </summary>
        </member>
        <member name="P:NKit.Data.DB.LINQ.LinqFunnelChangeResultWindows.NewValue">
            <summary>
            The new value that was set on the field which was changed on the entity.
            </summary>
        </member>
        <member name="T:NKit.Data.DB.LINQ.LinqFunnelContextWindows">
            <summary>
            A LINQ to SQL helper that uses generics to allow for easy Saving (Inserting/Updating), Retrieving and Deleting
            of entities.
            </summary>
        </member>
        <member name="M:NKit.Data.DB.LINQ.LinqFunnelContextWindows.#ctor(System.Data.Linq.DataContext,NKit.Data.DB.LINQ.LinqFunnelSettingsWindows)">
            <summary>
            Creates a new LINQ to SQL context. 
            </summary>
            <param name="db">The LINQ to SQL DataContext that must contain all the entity types etc.</param>
            <param name="applyContextSettings">Determines whether the settings in the settings file should be applied to the DataContext</param>
        </member>
        <member name="P:NKit.Data.DB.LINQ.LinqFunnelContextWindows.DB">
            <summary>
            Get or set the DataContext.
            Throws an exception if attempting to set it to null or if attempting to retrieve
            it when it is null.
            </summary>
        </member>
        <member name="M:NKit.Data.DB.LINQ.LinqFunnelContextWindows.Save``1(``0,System.Boolean)">
            <summary>
            Saves (updates/inserts) an entity to the table corrseponding to the entity type.
            If the entity's surrogate key is an identity entity will be inserted and not updated.
            </summary>
            <typeparam name="E">The type of the entity i.e. which table it will be saved to.</typeparam>
            <param name="entity">The the entity to save.</param>
            <returns>Returns a list of change results i.e. what entities where updated</returns>
        </member>
        <member name="M:NKit.Data.DB.LINQ.LinqFunnelContextWindows.Save(System.Type,System.Object,System.Boolean)">
            <summary>
            Saves (updates/inserts) an entity to the table corrseponding to the entity type.
            If the entity's surrogate key is an identity entity will be inserted and not updated.
            </summary>
            <typeparam name="E">The type of the entity i.e. which table it will be saved to.</typeparam>
            <param name="entity">The the entity to save.</param>
            <returns>Returns a list of change results i.e. what entities where updated</returns>
        </member>
        <member name="M:NKit.Data.DB.LINQ.LinqFunnelContextWindows.GetEntitySurrogateKey``1">
            <summary>
            Determines the primary key of an entity type. The first primary key found on the entity type i.e.
            the assumption is made that the entity type only has one primary key, which is the surrogate key.
            </summary>
            <typeparam name="E">The entity type i.e. the table whose surrogate key needs to be determined.</typeparam>
            <returns>Retruns the PropertyInfo corresponding to the column which is the surrogate key for the specified entity type.</returns>
        </member>
        <member name="M:NKit.Data.DB.LINQ.LinqFunnelContextWindows.GetEntitySurrogateKey(System.Type)">
            <summary>
            Determines the primary key of an entity type. The first primary key found on the entity type i.e.
            the assumption is made that the entity type only has one primary key, which is the surrogate key.
            </summary>
            <typeparam name="E">The entity type i.e. the table whose surrogate key needs to be determined.</typeparam>
            <returns>Retruns the PropertyInfo corresponding to the column which is the surrogate key for the specified entity type.</returns>
        </member>
        <member name="M:NKit.Data.DB.LINQ.LinqFunnelContextWindows.IsIdentityColumn(System.Reflection.PropertyInfo)">
            <summary>
            Determines whether a property is an identity column.
            </summary>
            <param name="p"></param>
            <returns>Returns true if the property is an identity column.</returns>
        </member>
        <member name="M:NKit.Data.DB.LINQ.LinqFunnelContextWindows.UpdateOriginalEntity``1(``0,``0,System.Boolean)">
            <summary>
            Updates the original entity with values of the latest entities. In other words, it copies the
            column values of the latest entity to the original entity.
            </summary>
            <typeparam name="E">The entity type i.e. the table whose original record will be updated.</typeparam>
            <param name="original">The original entity retrieved from the database.</param>
            <param name="latest">The latest entity received from the client.</param>
            <returns>Returns a list of change results containing all the fields that were changed and their original and new values.</returns>
        </member>
        <member name="M:NKit.Data.DB.LINQ.LinqFunnelContextWindows.UpdateOriginalEntity(System.Type,System.Object,System.Object,System.Boolean)">
            <summary>
            Updates the original entity with values of the latest entities. In other words, it copies the
            column values of the latest entity to the original entity.
            </summary>
            <typeparam name="E">The entity type i.e. the table whose original record will be updated.</typeparam>
            <param name="original">The original entity retrieved from the database.</param>
            <param name="latest">The latest entity received from the client.</param>
            <returns>Returns a list of change results containing all the fields that were changed and their original and new values.</returns>
        </member>
        <member name="M:NKit.Data.DB.LINQ.LinqFunnelContextWindows.Delete``1(``0)">
            <summary>
            Deletes an entity from the table corresponding to the entity type.
            </summary>
            <typeparam name="E">The entity type i.e. which table it will be deleted from.</typeparam>
            <param name="entity">The entity to be deleted.</param>
            <returns>Returns a list of change results.</returns>
        </member>
        <member name="M:NKit.Data.DB.LINQ.LinqFunnelContextWindows.Delete(System.Object)">
            <summary>
            Deletes an entity from the table corresponding to the entity type.
            </summary>
            <typeparam name="E">The entity type i.e. which table it will be deleted from.</typeparam>
            <param name="entity">The entity to be deleted.</param>
            <returns>Returns a list of change results.</returns>
        </member>
        <member name="M:NKit.Data.DB.LINQ.LinqFunnelContextWindows.Delete``2(``0,System.Boolean)">
            <summary>
            Deletes an entity from the table correspoding to the entity type (E) and creates
            a tombstone in the table correspoging to the tombstone entity type (T) if the 
            createTombstone flag is set to true.
            </summary>
            <typeparam name="E">The entity type of the entity which will be deleted i.e. the table from where it will be deleted.</typeparam>
            <typeparam name="T">The tombstone entity type i.e. the table where an tombstone will be created.</typeparam>
            <param name="entity">The entity to be deleted</param>
            <param name="createTombstone">Indicates whether a tombstone should be created.</param>
            <returns>Returns a list of change results.</returns>
        </member>
        <member name="M:NKit.Data.DB.LINQ.LinqFunnelContextWindows.Delete(System.Object,System.Boolean,System.Type)">
            <summary>
            Deletes an entity from the table correspoding to the entity type (E) and creates
            a tombstone in the table correspoging to the tombstone entity type (T) if the 
            createTombstone flag is set to true.
            </summary>
            <typeparam name="E">The entity type of the entity which will be deleted i.e. the table from where it will be deleted.</typeparam>
            <typeparam name="T">The tombstone entity type i.e. the table where an tombstone will be created.</typeparam>
            <param name="entity">The entity to be deleted</param>
            <param name="createTombstone">Indicates whether a tombstone should be created.</param>
            <returns>Returns a list of change results.</returns>
        </member>
        <member name="M:NKit.Data.DB.LINQ.LinqFunnelContextWindows.DeleteBySurrogateKey``1(System.Object)">
            <summary>
            Deletes an entity from the table corresponding to the entity type.
            </summary>
            <typeparam name="E">The entity type i.e. which table it will be deleted from.</typeparam>
            <param name="surrogatekeyValue">The entity to be deleted.</param>
            <returns>Returns a list of change results.</returns>
        </member>
        <member name="M:NKit.Data.DB.LINQ.LinqFunnelContextWindows.DeleteBySurrogateKey(System.Object,System.Type)">
            <summary>
            Deletes an entity from the table corresponding to the entity type.
            </summary>
            <typeparam name="E">The entity type i.e. which table it will be deleted from.</typeparam>
            <param name="surrogatekeyValue">The entity to be deleted.</param>
            <returns>Returns a list of change results.</returns>
        </member>
        <member name="M:NKit.Data.DB.LINQ.LinqFunnelContextWindows.DeleteBySurrogateKey``2(System.Object,System.Boolean)">
            <summary>
            Deletes an entity from the table with the specified surrogate key correspoding to the entity type (E) and creates
            a tombstone in the table correspoging to the tombstone entity type (T) if the 
            createTombstone flag is set to true.
            </summary>
            <typeparam name="E">The entity type of the entity which will be deleted i.e. the table from where it will be deleted.</typeparam>
            <typeparam name="T">The tombstone entity type i.e. the table where an tombstone will be created.</typeparam>
            <param name="surrogateKeyValue">The surrogate key of the entity to be deleted</param>
            <param name="createTombstone">Indicates whether a tombstone should be created.</param>
            <returns>Returns a list of change results.</returns>
        </member>
        <member name="M:NKit.Data.DB.LINQ.LinqFunnelContextWindows.DeleteBySurrogateKey(System.Object,System.Boolean,System.Type,System.Type)">
            <summary>
            Deletes an entity from the table with the specified surrogate key correspoding to the entity type (E) and creates
            a tombstone in the table correspoging to the tombstone entity type (T) if the 
            createTombstone flag is set to true.
            </summary>
            <typeparam name="E">The entity type of the entity which will be deleted i.e. the table from where it will be deleted.</typeparam>
            <typeparam name="T">The tombstone entity type i.e. the table where an tombstone will be created.</typeparam>
            <param name="surrogateKeyValue">The surrogate key of the entity to be deleted</param>
            <param name="createTombstone">Indicates whether a tombstone should be created.</param>
            <returns>Returns a list of change results.</returns>
        </member>
        <member name="M:NKit.Data.DB.LINQ.LinqFunnelContextWindows.DeleteOlderThan``1(System.String,System.TimeSpan)">
            <summary>
            Deletes all the entities in a given table older than the time specified.
            </summary>
            <typeparam name="E">The entity type of the entity which will be deleted i.e. the table from where it will be deleted.</typeparam>
            <param name="dateFieldName">The field name on the entity which must a date time field .</param>
            <param name="time">The time relative to the current time i.e. current time subracted by the this time sets the threshhold for entities deleted.</param>
        </member>
        <member name="M:NKit.Data.DB.LINQ.LinqFunnelContextWindows.DeleteOlderThan(System.Type,System.String,System.TimeSpan)">
            <summary>
            Deletes all the entities in a given table older than the time specified.
            </summary>
            <typeparam name="E">The entity type of the entity which will be deleted i.e. the table from where it will be deleted.</typeparam>
            <param name="dateFieldName">The field name on the entity which must a date time field .</param>
            <param name="time">The time relative to the current time i.e. current time subracted by the this time sets the threshhold for entities deleted.</param>
        </member>
        <member name="M:NKit.Data.DB.LINQ.LinqFunnelContextWindows.DeleteAll``1">
            <summary>
            Deletes all entities from the table corresponding to the entity type.
            </summary>
            <typeparam name="E">The entity type i.e. of the table whose records (entities) will be deleted.</typeparam>
        </member>
        <member name="M:NKit.Data.DB.LINQ.LinqFunnelContextWindows.DeleteAll(System.Type)">
            <summary>
            Deletes all entities from the table corresponding to the entity type.
            </summary>
            <typeparam name="E">The entity type i.e. of the table whose records (entities) will be deleted.</typeparam>
        </member>
        <member name="M:NKit.Data.DB.LINQ.LinqFunnelContextWindows.CopyToTombstoneEntity``2(``0,``1)">
            <summary>
            Copies all the values from the original entity to a tombstone entity. If the fields/columns on the two entities
            do not match an exception will be thrown.
            </summary>
            <param name="original">The original entity retrieved from the database.</param>
            <param name="tombstone">The tombstone entity containing the same fields/columns as the original entity.</param>
        </member>
        <member name="M:NKit.Data.DB.LINQ.LinqFunnelContextWindows.CopyToTombstoneEntity(System.Type,System.Type,System.Object,System.Object)">
            <summary>
            Copies all the values from the original entity to a tombstone entity. If the fields/columns on the two entities
            do not match an exception will be thrown.
            </summary>
            <param name="original">The original entity retrieved from the database.</param>
            <param name="tombstone">The tombstone entity containing the same fields/columns as the original entity.</param>
        </member>
        <member name="M:NKit.Data.DB.LINQ.LinqFunnelContextWindows.GetFirstEntity``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Queries for and returns the first entity filtered by the specified expression.
            </summary>
            <typeparam name="E">The entity type i.e. which table the entity will be queried from.</typeparam>
            <param name="expression">The expression to use to filter by.</param>
            <returns>Returns the first entity filtered by the specified expression.</returns>
        </member>
        <member name="M:NKit.Data.DB.LINQ.LinqFunnelContextWindows.GetFirstEntity``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Boolean)">
            <summary>
            Queries for and returns the first entity filtered by the specified expression.
            </summary>
            <typeparam name="E">The entity type i.e. which table the entity will be queried from.</typeparam>
            <param name="expression">The expression to use to filter by.</param>
            <param name="throwExceptionOnNotFound">Whether or not to to throw an exception if the result is null.</param>
            <returns>Returns the first entity filtered by the specified expression.</returns>
        </member>
        <member name="M:NKit.Data.DB.LINQ.LinqFunnelContextWindows.GetEntities``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Queries for and returns a list of entities filtered by the specified expression.
            </summary>
            <typeparam name="E">The entity type i.e. which table the entity will be queried from.</typeparam>
            <param name="expression">The expression to use to filter by.</param>
            <returns>Returns a list of entities filtered by the specified expression.</returns>
        </member>
        <member name="M:NKit.Data.DB.LINQ.LinqFunnelContextWindows.GetEntityBySurrogateKey(System.Type,System.Object,System.Boolean)">
            <summary>
            Queries for and returns an entity from the table corresponding to the entity type. The query is performed
            on the surrogate key of the entity.
            </summary>
            <param name="entityType">The entity type i.e. which table the entity will be queried from.</param>
            <param name="keyValue">The value of the surrogate to search by.</param>
            <param name="loadChildren">Whether or not to load the children entities onto this entity.</param>
            <returns>Returns an entity with the specified type and surrogate key. Returns null if one is not found.</returns>
        </member>
        <member name="M:NKit.Data.DB.LINQ.LinqFunnelContextWindows.GetEntityBySurrogateKey(System.Type,System.Object,System.Boolean,System.Boolean)">
            <summary>
            Queries for and returns an entity from the table corresponding to the entity type. The query is performed
            on the surrogate key of the entity.
            </summary>
            <param name="entityType">The entity type i.e. which table the entity will be queried from.</param>
            <param name="keyValue">The value of the surrogate to search by.</param>
            <param name="loadChildren">Whether or not to load the children entities onto this entity.</param>
            <param name="throwExceptionOnNotFound">Whether or not to throw an exception if the result is null.</param>
            <returns>Returns an entity with the specified type and surrogate key. Returns null if one is not found.</returns>
        </member>
        <member name="M:NKit.Data.DB.LINQ.LinqFunnelContextWindows.GetEntityBySurrogateKey``1(System.Object,System.Boolean)">
            <summary>
            Queries for and returns an entity from the table corresponding to the entity type. The query is performed
            on the surrogate key of the entity.
            </summary>
            <typeparam name="E">The entity type i.e. which table the entity will be queried from.</typeparam>
            <param name="keyValue">The value of the surrogate to search by.</param>
            <param name="loadChildren">Whether or not to load the children entities onto this entity.</param>
            <returns>Returns an entity with the specified type and surrogate key. Returns null if one is not found.</returns>
        </member>
        <member name="M:NKit.Data.DB.LINQ.LinqFunnelContextWindows.GetEntityBySurrogateKey``1(System.Object,System.Boolean,System.Boolean)">
            <summary>
            Queries for and returns an entity from the table corresponding to the entity type. The query is performed
            on the surrogate key of the entity.
            </summary>
            <typeparam name="E">The entity type i.e. which table the entity will be queried from.</typeparam>
            <param name="keyValue">The value of the surrogate to search by.</param>
            <param name="loadChildren">Whether or not to load the children entities onto this entity.</param>
            <param name="throwExceptionOnNotFound">Whether or not to throw an exception if the result is null.</param>
            <returns>Returns an entity with the specified type and surrogate key. Returns null if one is not found.</returns>
        </member>
        <member name="M:NKit.Data.DB.LINQ.LinqFunnelContextWindows.GetEntitiesByField(System.Type,System.String,System.Object,System.Boolean)">
            <summary>
            Queries for entities in a table corresponding to entity type. The query is performed on the column/field
            specified with the specified field value.
            </summary>
            <typeparam name="E">The entity type i.e. the table from which the entities will be returned.</typeparam>
            <param name="fieldName">The name of the field/column on which the query will be performed.</param>
            <param name="fieldValue">The value of the field which will be used for the query.</param>
            <param name="loadChildren">Whether or not to load the children of the entities as well.</param>
            <returns>Returns a list of entities of the specified type with the specified field/column and field value.</returns>
        </member>
        <member name="M:NKit.Data.DB.LINQ.LinqFunnelContextWindows.GetEntitiesByField``1(System.String,System.Object,System.Boolean)">
            <summary>
            Queries for entities in a table corresponding to entity type. The query is performed on the column/field
            specified with the specified field value.
            </summary>
            <typeparam name="E">The entity type i.e. the table from which the entities will be returned.</typeparam>
            <param name="fieldName">The name of the field/column on which the query will be performed.</param>
            <param name="fieldValue">The value of the field which will be used for the query.</param>
            <param name="loadChildren">Whether or not to load the children of the entities as well.</param>
            <returns>Returns a list of entities of the specified type with the specified field/column and field value.</returns>
        </member>
        <member name="M:NKit.Data.DB.LINQ.LinqFunnelContextWindows.GetAllEntities``1(System.Boolean)">
            <summary>
            Queries for all the entities in a table corresponging to the specfied entity type.
            </summary>
            <typeparam name="E">The entity type i.e. the table from which the entities will be returned.</typeparam>
            <returns>Returns all the entities of the specified type.</returns>
        </member>
        <member name="M:NKit.Data.DB.LINQ.LinqFunnelContextWindows.GetAllEntities(System.Type,System.Boolean)">
            <summary>
            Queries for all the entities in a table corresponging to the specfied entity type.
            </summary>
            <typeparam name="E">The entity type i.e. the table from which the entities will be returned.</typeparam>
            <returns>Returns all the entities of the specified type.</returns>
        </member>
        <member name="M:NKit.Data.DB.LINQ.LinqFunnelContextWindows.GetTotalCount``1">
            <summary>
            Returns the total count of an entity type.
            </summary>
            <typeparam name="E">The entity type i.e. the table from which the entities will be counted.</typeparam>
            <returns>Returns the total count of an entity type.</returns>
        </member>
        <member name="M:NKit.Data.DB.LINQ.LinqFunnelContextWindows.GetTotalCountLong``1">
            <summary>
            Returns the total count of an entity type.
            </summary>
            <typeparam name="E">The entity type i.e. the table from which the entities will be counted.</typeparam>
            <returns>Returns the total count of an entity type.</returns>
        </member>
        <member name="M:NKit.Data.DB.LINQ.LinqFunnelContextWindows.GetTotalCount(System.Type)">
            <summary>
            Returns the total count of an entity type.
            </summary>
            <typeparam name="E">The entity type i.e. the table from which the entities will be counted.</typeparam>
            <returns>Returns the total count of an entity type.</returns>
        </member>
        <member name="M:NKit.Data.DB.LINQ.LinqFunnelContextWindows.GetTotalCountLong(System.Type)">
            <summary>
            Returns the total count of an entity type.
            </summary>
            <typeparam name="E">The entity type i.e. the table from which the entities will be counted.</typeparam>
            <returns>Returns the total count of an entity type.</returns>
        </member>
        <member name="M:NKit.Data.DB.LINQ.LinqFunnelContextWindows.GetLinqToSqlChangeConflictErrorMessage(System.Data.Linq.DataContext)">
            <summary>
            Searches through all changes that caused a concurrency conflict in the DataContext and 
            compiles an error message listing all the conflicts on all tables and each member (field) that caused the conflicts.
            This method should be called after having called SubmitChanges on a DataContext and where a ChangeConflictException
            has occured.
            </summary>
            <returns></returns>
        </member>
        <member name="T:NKit.Data.DB.LINQ.Logging.LinqServerActionWindows">
            <summary>
            ORM entity for logging to a corresponding SQL server table.
            The same table should exist in the SQL Server database as well as a corresponding LINQ to SQL entity type with the same fields.
            </summary>
        </member>
        <member name="T:NKit.Data.DB.LINQ.Logging.LinqServerErrorWindows">
            <summary>
            ORM entity for logging to a corresponding SQL server table.
            The same table should exist in the SQL Server database as well as a corresponding LINQ to SQL entity type with the same fields.
            </summary>
        </member>
        <member name="T:NKit.Data.DB.LINQ.Logging.LinqUserWindows">
            <summary>
            ORM entity for managing users and logging against their name to a corresponding SQL server table.
            The same table should exist in the SQL Server database as well as a corresponding LINQ to SQL entity type with the same fields.
            </summary>
        </member>
        <member name="T:NKit.Data.DB.SQLServer.SqlDatabaseTableColumnWindows">
            <summary>
            http://msdn.microsoft.com/library/ms254969.aspx
            </summary>
        </member>
        <member name="M:NKit.Data.DB.SQLServer.SqlDatabaseWindows.PopulateTablesFromSchema(System.Boolean,System.Data.Common.DbConnection,System.Boolean)">
            <summary>
            http://msdn.microsoft.com/library/ms254969.aspx
            http://www.devart.com/dotconnect/salesforce/docs/Metadata-GetSchema.html
            </summary>
            <param name="includeColumns"></param>
        </member>
        <member name="T:NKit.Data.DB.SQLServer.SqlTypeConverterWindows">
            <summary>
            http://msdn.microsoft.com/en-us/library/system.data.sqltypes.aspx
            </summary>
        </member>
        <member name="M:NKit.Data.DB.SqlConnectionExtensionsWindows.GetTableForeignKeys(System.Data.SqlClient.SqlConnection,System.String)">
            <summary>
            This method sometimes throws an exception in SQL 2008 or SQl 2008 R2:
            "There is insufficient system memory in resource pool 'internal' to run this query" error message when you run a full-text query that uses compound words in Microsoft SQL Server 2008 or in Microsoft SQL Server 2008 R2"
            Fix: http://support.microsoft.com/kb/982854
            </summary>
            <param name="connection"></param>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:NKit.Data.EntityCacheGeneric`2.NotifyEntityUpdated(`0,`1)">
            <summary>
            Adds the specified entity to collection of updated entities to be used when saving to the server.
            </summary>
            <param name="entityId">The ID of the entity that was updated.</param>
            <param name="e">The entity that was update.</param>
        </member>
        <member name="M:NKit.Data.EntityCacheGeneric`2.RefreshFromServer">
            <summary>
            Default implementation of this method does nothing, except display a message that this method has no implementation.
            You need to override and provide your own implementation for this method.
            </summary>
            <returns>Provide your own logic.</returns>
        </member>
        <member name="M:NKit.Data.EntityCacheGeneric`2.SaveToServer">
            <summary>
            Default implementation of this method does nothing, except display a message that this method has no implementation.
            You need to override and provide your own implementation for this method.
            </summary>
            <returns>Provide your own logic.</returns>
        </member>
        <member name="M:NKit.Data.EntityCacheGeneric`2.RefreshFromServer(NKit.Web.Client.REST.RestWebServiceClient)">
            <summary>
            Refreshes this cache with entities from the server using the supplied RestWebServiceClient.
            N.B. A REST web service needs to exist on the web server with methods matching those expected by the RestWebService.
            </summary>
            <param name="restWebServiceClient">The rest web service client to be used to refresh entities from the server.</param>
            <returns>Returns true if it completed successfully.</returns>
        </member>
        <member name="M:NKit.Data.EntityCacheGeneric`2.RefreshFromServer(NKit.Web.Client.REST.RestWebServiceClient,System.String,System.Object)">
            <summary>
            Refreshes this cache with entities from the server using the suuplied RestWebServiceClient and the
            fieldName and fieldValue as search parameters.
            /// N.B. A REST web service needs to exist on the web server with methods matching those expected by the RestWebService.
            </summary>
            <param name="restWebServiceClient">The rest web service client to be used to refresh entities from the server.</param>
            <param name="fieldName">The field of the entity to search by.</param>
            <param name="fieldValue">The value of the field of the entity to search on.</param>
            <returns></returns>
        </member>
        <member name="M:NKit.Data.EntityCacheGeneric`2.SaveToServer(NKit.Web.Client.REST.RestWebServiceClient)">
            <summary>
            Processes all the deleted, added and updated entities in this cache by deleting, adding and updating them on the server
            using the supplied RestWebServiceClient.
            N.B. A REST web service needs to exist on the web server with methods matching those expected by the RestWebService.
            </summary>
            <param name="restWebServiceClient">The rest web service client to be used to save the entities in the cache to the server.</param>
            <returns>Returns true if it completed successfully.</returns>
        </member>
        <member name="M:NKit.Data.EntityCacheUnique.NotifyEntityUpdated(System.Guid,System.Object)">
            <summary>
            Adds the specified entity to collection of updated entities to be used when saving to the server.
            </summary>
            <param name="entityId">The ID of the entity that was updated.</param>
            <param name="e">The entity that was update.</param>
        </member>
        <member name="M:NKit.Data.EntityReader.GetPropertyNamesByType(System.Type,System.Collections.Generic.List{System.Type},System.Boolean)">
            <summary>
            Gets a the names of properties of the specified entity type whose types match are in the specified list of propertyTypes.
            </summary>
            <param name="entityType">The type of the property to reflect against.</param>
            <param name="propertyTypes">The types of which the properties of the entity should be.</param>
            <returns></returns>
        </member>
        <member name="T:NKit.Data.iCalendar.ICalCalendarDownloader">
            <summary>
            Utility class that downloads an .ics file from a website and converts to to an ICalCalendar object.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:NKit.Data.iCalendar.ICalCalendarDownloader.#ctor(System.String)" -->
        <!-- Badly formed XML comment ignored for member "P:NKit.Data.iCalendar.ICalCalendarDownloader.DownloadUrl" -->
        <member name="M:NKit.Data.iCalendar.ICalCalendarDownloader.DownloadICalCalendar(System.String,System.String,System.Int32,System.String,System.Boolean)">
            <summary>
            Generates a date range with the start date from the 1st of January of the given year to the 31st of December of the given year.
            Converts the date time to the following date format when downloading th calendar from the URL: day-month-year e.g. 01-12-2018.
            </summary>
        </member>
        <member name="M:NKit.Data.iCalendar.ICalCalendarDownloader.DownloadICalCalendar(System.String,System.String,System.DateTime,System.DateTime,System.String,System.Boolean)">
            <summary>
            Converts the date time to the following date format when downloading th calendar from the URL: day-month-year e.g. 01-12-2018.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NKit.Data.iCalendar.ICalCalendarDownloader.DownloadICalCalendar(System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            The country code, start date and end date will be applied to the download URL of this ICalCalendarDownloader.
            The Country Name is only used for display purposes when constructing the resulting the ICalCalendar.
            If the output file name is not specified, a temp file path will be generated in the current user's temp folder.
            Country codes should be supplied as ISO 3166-1 alpha-3 Standard: https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3
            </summary>
            <returns></returns>
        </member>
        <member name="T:NKit.Data.ORM.OrmProperty">
            <summary>
            http://olondono.blogspot.com/2008/02/creating-code-at-runtime.html
            </summary>
        </member>
        <member name="T:NKit.Data.ORM.OrmType">
            <summary>
            http://olondono.blogspot.com/2008/02/creating-code-at-runtime.html
            </summary>
        </member>
        <member name="T:NKit.Data.ORM.OrmAssembly">
            <summary>
            http://olondono.blogspot.com/2008/02/creating-code-at-runtime.html
            Collectible Assemblies for Dynamic Type Generation : http://msdn.microsoft.com/en-us/library/dd554932.aspx#restrictions
            </summary>
        </member>
        <member name="M:NKit.Data.ORM.OrmAssembly.GetAssemblyFilePathToExecutingDirectory">
            <summary>
            Gets the default assembly file path which is the assembly file name in the current executing directory.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NKit.Data.ORM.OrmAssembly.SaveOrmAssemblyToExecutingDirectory">
            <summary>
            We can only save the assembly in the current directory when we call save i.e. we're not allowed to set a path.
            However, the current directory may not always be equal to current directory. 
            If that's the case we need to save it to the current directory, then copy it to the executing directory and thereafter delete it from the current directory.
            </summary>
        </member>
        <member name="M:NKit.Data.ORM.OrmAssembly.Save(System.String)">
            <summary>
            Saves the assembly in the executing directory and then copies it to the specified output directory if the output directory is different from the executing directory.
            Throws an exception of the specified output directory does not exist.
            </summary>
        </member>
        <member name="M:NKit.Data.ORM.OrmAssembly.ToString">
            <summary>
            Gets the assembly file name.
            </summary>
        </member>
        <member name="T:NKit.Data.ORM.OrmTypeWindows">
            <summary>
            http://olondono.blogspot.com/2008/02/creating-code-at-runtime.html
            </summary>
        </member>
        <member name="M:NKit.Data.EntityReaderWindows.GetLinqToSqlEntitySurrogateKey(System.Type)">
            <summary>
            Determines the primary key of an entity type. The first primary key found on the entity type i.e.
            the assumption is made that the entity type only has one primary key, which is the surrogate key.
            </summary>
            <typeparam name="E">The entity type i.e. the table whose surrogate key needs to be determined.</typeparam>
            <returns>Retruns the PropertyInfo corresponding to the column which is the surrogate key for the specified entity type.</returns>
        </member>
        <member name="M:NKit.Data.EntityReaderWindows.IsLinqToSqlEntityPropertyIdentityColumn(System.Reflection.PropertyInfo)">
            <summary>
            Determines whether a property is an identity column.
            </summary>
            <param name="p"></param>
            <returns>Returns true if the property is an identity column.</returns>
        </member>
        <member name="M:NKit.Data.EntityReaderWindows.GetLinqToSqlEntitySurrogateKey``1">
            <summary>
            Determines the primary key of an entity type. The first primary key found on the entity type i.e.
            the assumption is made that the entity type only has one primary key, which is the surrogate key.
            </summary>
            <typeparam name="E">The entity type i.e. the table whose surrogate key needs to be determined.</typeparam>
            <returns>Retruns the PropertyInfo corresponding to the column which is the surrogate key for the specified entity type.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:NKit.Utilities.EagerTimer" -->
        <member name="M:NKit.Utilities.EagerTimer.Start(System.Boolean)">
            <summary>
            Starts the timer. If the autoStart parameter on this method or the AutoStart property on the timer is set to True, then the
            elapsed event is fired.
            </summary>
            <param name="autoStart">If set to true (or if the AutoStart property on this Timer is set to True), it forces the the elapsed event to be fired.</param>
        </member>
        <member name="M:NKit.Utilities.EagerTimer.RaiseElapsed">
            <summary>
            Manually raises the Elapsed event of the System.Timers.Timer.
            </summary>
        </member>
        <member name="M:NKit.Utilities.Encryptor.GetInt64HashCode(System.String)">
            <summary>
            Return unique Int64 value for input string
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="T:NKit.Utilities.ExceptionHandler">
            <summary>
            A helper class for handling exceptions i.e. logging and displaying them.
            </summary>
        </member>
        <member name="M:NKit.Utilities.ExceptionHandler.GetCompleteExceptionMessage(System.Exception,System.Boolean)">
            <summary>
            Gets the complete error message including the exception message, inner exception message (if it exists) and stack trace.
            </summary>
            <param name="ex">Exception whose message to be retrieved.</param>
            <param name="includeStackTrace">Whether to include the exeption's stack trace in the message.</param>
            <returns></returns>
        </member>
        <member name="M:NKit.Utilities.FileSystemHelper.DeleteDirectoryRecursive(System.IO.DirectoryInfo)">
            <summary>
            Deletes a directory recursively: all sub directory and all files within it.
            If a file within the directory or sub-directory is marked as read-only it will be edit it as not read-only and then deleted.
            </summary>
        </member>
        <member name="M:NKit.Utilities.FileSystemHelper.DeleteFileForce(System.IO.FileInfo)">
            <summary>
            Deletes a file and if it's set to read-only it will edit it as not read-only and then deleted.
            </summary>
        </member>
        <member name="T:NKit.Utilities.Formula">
            <summary>
            A helper class containing geometry and other maths methods.
            </summary>
        </member>
        <member name="M:NKit.Utilities.Formula.GetRectangleFromVertices(NKit.Utilities.Vertex,NKit.Utilities.Vertex)">
            <summary>
            Creates a rectangle given the top left and bottom right vertices.
            </summary>
            <param name="topLeftVertex">The vertex of the top left hand corner of the rectangle.</param>
            <param name="bottomRightVertex">The vertex of the bottom right hand corner of the rectangle.</param>
            <returns></returns>
        </member>
        <member name="M:NKit.Utilities.Formula.GetPolygonArea(System.Collections.Generic.List{NKit.Utilities.Vertex})">
            <summary>
            Calculates the area of any irregular polygon given its vertices.
            http://www.mathopenref.com/coordpolygonarea2.html
            </summary>
            <param name="vertices">The list of vertices of the polygon.</param>
            <returns>Returns the area of the polygon.</returns>
        </member>
        <member name="M:NKit.Utilities.Formula.GetTriangleArea(NKit.Utilities.Vertex,NKit.Utilities.Vertex,NKit.Utilities.Vertex)">
            <summary>
            Calculates the area of any triangle given it's three vertices.
            http://www.mathopenref.com/coordtrianglearea.html
            </summary>
            <returns>Returns the area of the triangle.</returns>
        </member>
        <member name="M:NKit.Utilities.Formula.GetRadius(NKit.Utilities.Vertex,NKit.Utilities.Vertex)">
            <summary>
            Determines the distance from the center of a circle to the given vertex.
            It basically gets the distance between two points.
            </summary>
            <param name="vertex"></param>
            <param name="centerVertex"></param>
            <returns></returns>
        </member>
        <member name="M:NKit.Utilities.Formula.IsVertexInsideCircle(NKit.Utilities.Vertex,NKit.Utilities.Vertex,System.Int32)">
            <summary>
            Determines if a supplied vertex is located inside this circle.
            </summary>
            <param name="vertex">The vertex to test for e.g. where the user clicked on the Image Map control.</param>
            <param name="centerVertex">The vertex marking the center of the circle.</param>
            <param name="circleRadius">The radius of the circle.</param>
            <returns>Returns true if the vertex is located inside circle.</returns>
        </member>
        <member name="M:NKit.Utilities.Formula.IsVertexInsideNonConvexPolygon(NKit.Utilities.Vertex,System.Collections.Generic.List{NKit.Utilities.Vertex})">
            <summary>
            Determines whether a given vertex is inside a convex polygon made up of the provided vertices.
            http://www.mathopenref.com/polygonconvex.html
            This method is not accurate for concave polygons.
            </summary>
            <param name="vertex">The vertex to test for e.g. where the user clicked on the Image Map control.</param>
            <param name="polygonVertices">The vertices of the making up the polygon.</param>
            <returns>Returns true if the vertix is inside the polygon.</returns>
        </member>
        <member name="M:NKit.Utilities.Formula.IsPolygonConvex(System.Collections.Generic.List{NKit.Utilities.Vertex})">
            <summary>
            Determines whether a polygon is Convex.
            http://stackoverflow.com/questions/471962/how-do-determine-if-a-polygon-is-complex-convex-nonconvex
            </summary>
            <param name="polygonVertices"></param>
            <returns></returns>
        </member>
        <member name="M:NKit.Utilities.Formula.IsVertexInsideConcavePolygon(NKit.Utilities.Vertex,System.Collections.Generic.List{NKit.Utilities.Vertex})">
            <summary>
            Determines whether a given vertex is inside a concave polygon made up of the provided vertices.
            http://alienryderflex.com/polygon/
            http://www.mathopenref.com/polygonconcave.html
            </summary>
            <param name="vertex">The vertex to test for e.g. where the user clicked on the Image Map control.</param>
            <param name="polygonVertices">The vertices of the making up the polygon.</param>
            <returns>Returns true if the vertix is inside the polygon.</returns>
        </member>
        <member name="M:NKit.Utilities.Formula.IsVertexInsideRectangle(NKit.Utilities.Vertex,System.Drawing.Rectangle)">
            <summary>
            Determines whether a given vertex is inside given a rectangle.
            </summary>
            <param name="vertex">The vertex to test for e.g. where the user clicked on the Image Map control.</param>
            <param name="rectangle">The rectangle to check against i.e. if the vertex is located inside of it.</param>
            <returns>Returns true if the vertex is inside the rectangle.</returns>
        </member>
        <member name="M:NKit.Utilities.Formula.GetPercentage(System.Int32,System.Int32,System.Int32)">
            <summary>
            Calculates the percentage of a value out of a total value e.g. 8 (value) out of 10 (totalValue) = 80.
            </summary>
            <param name="value">The value in question.</param>
            <param name="totalValue">The total value to calculate the percentage out of.</param>
            <param name="decimals">The number of decimal places to include in the percentage result.</param>
            <returns></returns>
        </member>
        <member name="M:NKit.Utilities.Formula.GetPercentage(System.Int64,System.Int64,System.Int32)">
            <summary>
            Calculates the percentage of a value out of a total value e.g. 8 (value) out of 10 (totalValue) = 80.
            </summary>
            <param name="value">The value in question.</param>
            <param name="totalValue">The total value to calculate the percentage out of.</param>
            <param name="decimals">The number of decimal places to include in the percentage result.</param>
            <returns></returns>
        </member>
        <member name="M:NKit.Utilities.ImageHandler.GetBytesFromImage(System.Drawing.Image)">
            <summary>
            Converts an Image to a byte array.
            </summary>
            <param name="image">An image to convert.</param>
            <returns>Returns a byte array.</returns>
        </member>
        <member name="M:NKit.Utilities.ImageHandler.ResizeImage(System.Drawing.Bitmap,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Method to resize, convert and save the image.
            </summary>
            <param name="image">Bitmap image.</param>
            <param name="maxWidth">resize width.</param>
            <param name="maxHeight">resize height.</param>
            <param name="quality">quality setting value.</param>
            <param name="filePath">file path.</param>      
        </member>
        <member name="M:NKit.Utilities.ImageHandler.GetEncoderInfo(System.Drawing.Imaging.ImageFormat)">
            <summary>
            Method to get encoder infor for given image format.
            </summary>
            <param name="format">Image format</param>
            <returns>image codec info.</returns>
        </member>
        <member name="F:NKit.Utilities.ImageHandler.ValidExtensions">
            <summary>
            Static readonly aray of valid file extensions for images.
            </summary>
        </member>
        <member name="M:NKit.Utilities.ImageHandler.IsFileAnImage(System.String,System.String[],System.Boolean,System.Boolean,System.String@)">
            <summary>
            Performs validations and checks whether a file is an image.
            </summary>
            <param name="filePath">The file path to the image file.</param>
            <param name="validFileExtensions">An array of valid file extensions to use to validate the file extension of the file.</param>
            <param name="validateFileExists">Whether or not to validate that the file exists. Throws FileNotFoundException if validation fails.</param>
            <param name="loadImageToValidate">Whether or not to try and load the file into an image object. If an exception is thrown due to an invalid image file, the exception is swallowed and this method returns false.</param>
            <param name="errorMessage">The error message that gets set if the file is not an image.</param>
            <returns></returns>
        </member>
        <member name="M:NKit.Utilities.ImageHandler.InjectImageBase64IntoHtml(System.String,System.String,System.String)">
            <summary>
            Takes the given image, converts it to a base 64 string and replaces replacementPlaceHolder in the HTML with the Image's base64 string presentation.
            </summary>
            <param name="imageFilePath">The file path of the image.</param>
            <param name="html">The HTML that the image needs to be injected into</param>
            <param name="replacementPlaceHolder">The replacement placeholder text in the HTML that needs to be replaced with the Image's base64 string presentation</param>
            <returns></returns>
        </member>
        <member name="M:NKit.Utilities.ImageHandler.InjectImageBase64IntoHtml(System.Byte[],System.String,System.String)">
            <summary>
            Takes the given image, converts it to a base 64 string and replaces replacementPlaceHolder in the HTML with the Image's base64 string presentation.
            </summary>
            <param name="imageBytes">The bytes of the image.</param>
            <param name="htmlText">The HTML that the image needs to be injected into</param>
            <param name="replacementPlaceHolderText">The replacement placeholder text in the HTML that needs to be replaced with the Image's base64 string presentation</param>
            <returns></returns>
        </member>
        <member name="T:NKit.Utilities.Information">
            <summary>
            A helper class helps in retrieving system information.
            </summary>
        </member>
        <member name="M:NKit.Utilities.Information.GetExecutingDirectory">
            <summary>
            Gets the executing directory of the current application.
            </summary>
        </member>
        <member name="M:NKit.Utilities.Information.GetSystemColors">
            <summary>
            Returns a dictionary of all the system colors with their names as the keys
            to the dictionary.
            </summary>
            <returns></returns>
        </member>
        <member name="T:NKit.Utilities.Logging.LogError">
            <summary>
            A class to hold an exception and the date/time it occured. To be used when logging.
            </summary>
        </member>
        <member name="T:NKit.Utilities.Logging.Logger">
            <summary>
            A helper class that can be used to messages to a
            log file and Windows EventLog that will be written in the assembly's executing directory.
            </summary>
        </member>
        <member name="F:NKit.Utilities.Logging.Logger.DEFAULT_LOG_FILE_NAME">
            <summary>
            The log file name where all errors and info etc. will be logged to in the same
            directory as the executing assembly.
            </summary>
        </member>
        <member name="F:NKit.Utilities.Logging.Logger.MAXIMUM_EVENT_LOG_MESSAGE_SIZE">
            <summary>
            The maximun length of a message that can be loggedd to the Windows Event Log.
            </summary>
        </member>
        <member name="T:NKit.Utilities.Logging.LogMessage">
            <summary>
            A class to hold some a message and the date/time. To be used when logging.
            </summary>
        </member>
        <member name="P:NKit.Utilities.Logging.LogMessage.Message">
            <summary>
            The message to log.
            </summary>
        </member>
        <member name="P:NKit.Utilities.Logging.LogMessage.Date">
            <summary>
            The date/time to record in the log when logging this LogInfo.
            </summary>
        </member>
        <member name="T:NKit.Utilities.Logging.LoggerWindows">
            <summary>
            A helper class that can be used to messages to a
            log file and Windows EventLog that will be written in the assembly's executing directory.
            </summary>
        </member>
        <member name="M:NKit.Utilities.Serialization.XSerializer.SerializeToFile(System.Object,System.String)">
            <summary>
            Serializes an object to an XML file. No extra/derived types will be provided
            to the underlying serializer.
            </summary>
            <param name="obj">The object to serialized.</param>
            <param name="filename">The the file path of the XML file to which object will be serialized to.</param>
        </member>
        <member name="M:NKit.Utilities.Serialization.XSerializer.SerializeToFile(System.Object,System.Type[],System.String)">
            <summary>
            Serializes an object to an XML file. All derived types should be included in the call
            for serialization to complete succcessfully.
            </summary>
            <param name="obj">The object to serialized.</param>
            <param name="extraTypes">The derived types to be provided to the underlying serializer.</param>
            <param name="filename">The the file path of the XML file to which object will be serialized to.</param>
        </member>
        <member name="T:NKit.Utilities.SettingsFile.Default.AppSettings">
            <summary>
            Default settings that any type of application can make use of.
            </summary>
        </member>
        <member name="P:NKit.Utilities.SettingsFile.Default.AppSettings.LogToFile">
            <summary>
            Whether or not to log to a text log file in the executing directory.
            </summary>
        </member>
        <member name="P:NKit.Utilities.SettingsFile.Default.AppSettings.LogToWindowsEventLog">
            <summary>
            Whether or not to log to the Windows Event Log.
            </summary>
        </member>
        <member name="P:NKit.Utilities.SettingsFile.Default.AppSettings.LogToConsole">
            <summary>
            Whether or not to log to the console.
            </summary>
        </member>
        <member name="P:NKit.Utilities.SettingsFile.Default.AppSettings.LogFileName">
            <summary>
            The name of the text log file to log to. The log file is written in the executing directory.
            </summary>
        </member>
        <member name="P:NKit.Utilities.SettingsFile.Default.AppSettings.EventSourceName">
            <summary>
            The name of the event source to use when logging to the Windows Event Log.
            </summary>
        </member>
        <member name="P:NKit.Utilities.SettingsFile.Default.AppSettings.EventLogName">
            <summary>
            The name of the Windows Event Log to log to.
            </summary>
        </member>
        <member name="P:NKit.Utilities.SettingsFile.Default.AppSettings.LoggingLevel">
            <summary>
            The extent of messages being logged: None = logging is disabled, Minimum = logs server start/stop and exceptions, Normal = logs additional information messages, Maximum = logs all requests and responses to the server.
            </summary>
        </member>
        <member name="P:NKit.Utilities.SettingsFile.Default.AppSettings.EmailNotificationsEnabled">
            <summary>
            Whether or not email notifications should be enabled.
            </summary>
        </member>
        <member name="P:NKit.Utilities.SettingsFile.Default.AppSettings.ThrowEmailFailExceptions">
            <summary>
            Whether exceptions that occur when sending emails should be thrown or handled.
            </summary>
        </member>
        <member name="P:NKit.Utilities.SettingsFile.Default.AppSettings.EmailProvider">
            <summary>
            The email (SMTP server) service provider that should be used for sending emails e.g. GMail/Exchange.
            </summary>
        </member>
        <member name="P:NKit.Utilities.SettingsFile.Default.AppSettings.ExchangeSmtpServer">
            <summary>
            The hostname of the Exchange email server.
            </summary>
        </member>
        <member name="P:NKit.Utilities.SettingsFile.Default.AppSettings.ExchangeSmtpUserName">
            <summary>
            The user name to use when authenticating against the Exchange email server.
            </summary>
        </member>
        <member name="P:NKit.Utilities.SettingsFile.Default.AppSettings.ExchangeSmtpPassword">
            <summary>
            The password to use when authenticating against the Exchange email server.
            </summary>
        </member>
        <member name="P:NKit.Utilities.SettingsFile.Default.AppSettings.ExchangeSmtpPort">
            <summary>
            The port to connect to when connecting to the Exchange email server.
            </summary>
        </member>
        <member name="P:NKit.Utilities.SettingsFile.Default.AppSettings.ExchangeSmtpEnableSsl">
            <summary>
            Whether or not to connect to the Exchange server using SSL (Secure Socket Layer).
            </summary>
        </member>
        <member name="P:NKit.Utilities.SettingsFile.Default.AppSettings.GMailSmtpServer">
            <summary>
            The hostname of the GMail server.
            </summary>
        </member>
        <member name="P:NKit.Utilities.SettingsFile.Default.AppSettings.GMailSmtpUserName">
            <summary>
            The user name to use when authenticating against the GMail email server.
            </summary>
        </member>
        <member name="P:NKit.Utilities.SettingsFile.Default.AppSettings.GMailSmtpPassword">
            <summary>
            The password to use when authenticating against the GMail email server.
            </summary>
        </member>
        <member name="P:NKit.Utilities.SettingsFile.Default.AppSettings.GMailSmtpPort">
            <summary>
            The port to connect to when connecting to the GMail email server.
            </summary>
        </member>
        <member name="P:NKit.Utilities.SettingsFile.Default.AppSettings.SenderEmailAddress">
            <summary>
            The email address to display of the email sender.
            </summary>
        </member>
        <member name="P:NKit.Utilities.SettingsFile.Default.AppSettings.SenderDisplayName">
            <summary>
            The display name of the email sender.
            </summary>
        </member>
        <member name="P:NKit.Utilities.SettingsFile.Default.AppSettings.ExceptionEmailSubject">
            <summary>
            The subject to display on emails sent out due to exceptions handled by the Exception Handler.
            </summary>
        </member>
        <member name="P:NKit.Utilities.SettingsFile.Default.AppSettings.SendEmailOnException">
            <summary>
            The subject to display on emails sent out due to exceptions handled by the Exception Handler.
            </summary>
        </member>
        <member name="P:NKit.Utilities.SettingsFile.Default.AppSettings.AppendHostNameToExceptionEmails">
            <summary>
            Whether or not add a line to every exception email sent out that includes the hostname of the machine running this software and thereby initiating the email.
            </summary>
        </member>
        <member name="P:NKit.Utilities.SettingsFile.Default.AppSettings.EmailLoggingEnabled">
            <summary>
            Whether or not activity related to the sending of emails.
            </summary>
        </member>
        <member name="P:NKit.Utilities.SettingsFile.Default.AppSettings.IncludeDefaultEmailRecipients">
            <summary>
            Whether or not include the list of default recipients in every email sent out.
            </summary>
        </member>
        <member name="P:NKit.Utilities.SettingsFile.Default.AppSettings.DefaultEmailRecipients">
            <summary>
            The default list of recipients that should be included in every email sent out i.e. if default recipients are configured to be included.
            </summary>
        </member>
        <member name="P:NKit.Utilities.SettingsFile.Default.AppSettings.MinimumWorkerThreadCount">
            <summary>
            The Minimum number of threads available in the Worker Thread Pool for each CPU in the machine.
            </summary>
        </member>
        <member name="P:NKit.Utilities.SettingsFile.Default.AppSettings.MinimumCompletionPortThreadCount">
            <summary>
            The Minimum number of threads available in the IOCP (IO Completion Port) Thread Pool for each CPU in the machine.
            </summary>
        </member>
        <member name="P:NKit.Utilities.SettingsFile.Default.DatabaseAppSettings.DatabaseConnectionString">
            <summary>
            The connection string to the server database.
            </summary>
        </member>
        <member name="P:NKit.Utilities.SettingsFile.Default.DatabaseAppSettings.DatabaseCommandTimeout">
            <summary>
            The timeout in milliseconds of the commands sent to the server database.
            </summary>
        </member>
        <member name="P:NKit.Utilities.SettingsFile.Default.DatabaseAppSettings.LinqToSQLClassesAssemblyFileName">
            <summary>
            The name of the assembly containing the Linq To SQL classes.
            </summary>
        </member>
        <member name="P:NKit.Utilities.SettingsFile.Default.DatabaseAppSettings.LinqToSQLClassesNamespace">
            <summary>
            The namespace where the Linq To SQL classes are located in the assembly.
            </summary>
        </member>
        <member name="P:NKit.Utilities.SettingsFile.Default.DatabaseAppSettings.DatabaseTransactionScopeOption">
            <summary>
            The Transaction Scope Option to use on queries to the database that are wrapped in a transaction.
            </summary>
        </member>
        <member name="P:NKit.Utilities.SettingsFile.Default.DatabaseAppSettings.DatabaseTransactionIsolationLevel">
            <summary>
            The Transaction Isolation Level to use on queries to the database that are wrapped in a transaction.
            </summary>
        </member>
        <member name="P:NKit.Utilities.SettingsFile.Default.DatabaseAppSettings.DatabaseTransactionTimeoutSeconds">
            <summary>
            The Transaction Timeout in seconds to use on on queries to the database that are wrapped in a transaction.
            </summary>
        </member>
        <member name="P:NKit.Utilities.SettingsFile.Default.DatabaseAppSettings.DatabaseTransactionDeadlockRetryAttempts">
            <summary>
            The number of retry attempts if transaction deadlocks occur on queries to the database that are wrapped in a transaction.
            </summary>
        </member>
        <member name="P:NKit.Utilities.SettingsFile.Default.DatabaseAppSettings.DatabaseTransactionDeadlockRetryWaitPeriod">
            <summary>
            The number milliseconds to wait before retry attempts on transaction deadlocks.
            </summary>
        </member>
        <member name="P:NKit.Utilities.SettingsFile.Default.WcfRestWebServiceAppSettings.RestServiceHostAddressSuffix">
            <summary>
            The suffix to append to the URI on which the web service will be accessed i.e. http://localhost:{port_number}/{suffix} e.g. http://localhost:8889/MyService.
            </summary>
        </member>
        <member name="P:NKit.Utilities.SettingsFile.Default.WcfRestWebServiceAppSettings.RestServicePortNumber">
            <summary>
            The port number on which the web service should listen for requests from clients i.e. http://localhost:{port_number}/{suffix} e.g. http://localhost:2984/MyService.
            </summary>
        </member>
        <member name="P:NKit.Utilities.SettingsFile.Default.WcfRestWebServiceAppSettings.RestServiceUseAuthentication">
            <summary>
            Whether or not the service should authenticate clients attempting to consume the service.
            </summary>
        </member>
        <member name="P:NKit.Utilities.SettingsFile.Default.WcfRestWebServiceAppSettings.RestServiceIncludeExceptionDetailInResponse">
            <summary>
            Whether or not to include the exception details including the stack trace in the web response when an unhandled exception occurs.
            </summary>
        </member>
        <member name="P:NKit.Utilities.SettingsFile.Default.WcfRestWebServiceAppSettings.RestServiceTextResponseEncoding">
            <summary>
            Encoding to used on the text response from the service.
            </summary>
        </member>
        <member name="P:NKit.Utilities.SettingsFile.Default.WcfRestWebServiceAppSettings.RestServiceIncludeOrmTypeNamesInJsonResponse">
            <summary>
            Whether or not to include in the JSON response the names of the .NET generated ORM types representing each table in the database.
            </summary>
        </member>
        <member name="P:NKit.Utilities.SettingsFile.Default.WcfRestWebServiceAppSettings.RestServiceMaxBufferPoolSize">
            <summary>
            The maximum amount of memory allocated, in bytes, for the buffer manager that manages the buffers required by endpoints that use this binding.
            </summary>
        </member>
        <member name="P:NKit.Utilities.SettingsFile.Default.WcfRestWebServiceAppSettings.RestServiceMaxBufferSize">
            <summary>
            The maximum amount of memory allocated, in bytes, for use by the manager of the message buffers that receive messages from the channel.
            </summary>
        </member>
        <member name="P:NKit.Utilities.SettingsFile.Default.WcfRestWebServiceAppSettings.RestServiceMaxReceivedMessageSize">
            <summary>
            The maximum size, in bytes, for a message that can be processed by the binding.
            </summary>
        </member>
        <member name="P:NKit.Utilities.SettingsFile.Default.WcfRestWebServiceAppSettings.RestServiceTraceHttpMessages">
            <summary>
            Whether to trace HTTP messages
            </summary>
        </member>
        <member name="P:NKit.Utilities.SettingsFile.Default.WcfRestWebServiceAppSettings.RestServiceTraceHttpMessageHeaders">
            <summary>
            Whether to trace HTTP message headers
            </summary>
        </member>
        <member name="P:NKit.Utilities.SettingsFile.Default.WcfRestWebServiceAppSettings.RestServiceAuditServiceCalls">
            <summary>
            Whether to audit (log) calls on this web service.
            </summary>
        </member>
        <member name="P:NKit.Utilities.SettingsFile.Default.WcfRestWebServiceAppSettings.RestServiceServiceFtpDirectory">
            <summary>
            Directory where files get uploaded to by the mobile app via FTP.
            </summary>
        </member>
        <member name="P:NKit.Utilities.SettingsFile.Default.WcfRestWebServiceAppSettings.RestServiceMaxConcurrentCalls">
            <summary>
            The number of concurrent calls that can be made – under .NET 4 defaults to 16 x number of cores.
            </summary>
        </member>
        <member name="P:NKit.Utilities.SettingsFile.Default.WcfRestWebServiceAppSettings.RestServiceMaxConcurrentSessions">
            <summary>
            The number of concurrent sessions that can be in in flight – under .NET 4 defaults to 100 x number of cores.
            Using Sessions: https://docs.microsoft.com/en-us/dotnet/framework/wcf/using-sessions
            </summary>
        </member>
        <member name="P:NKit.Utilities.SettingsFile.Default.WcfRestWebServiceAppSettings.RestServiceMaxConcurrentInstances">
            <summary>
            The number of service implementation objects that are in use – defaults to the sum of MaxConcurrentCalls + MaxConcurrentSessions.
            </summary>
        </member>
        <member name="P:NKit.Utilities.SettingsFile.Default.WcfRestWebServiceAppSettings.RestServiceHandleExceptionsOnClientConnectionAccepted">
            <summary>
            Whether or not the server will handle exceptions (logging and email notifications) after HTTP client connections have been accepted. If set to true, exception handling is optional in your custom agents.
            </summary>
        </member>
        <member name="P:NKit.Utilities.SettingsFile.Default.WcfRestWebServiceAppSettings.RestServiceReturnResponseOnAgentExceptions">
            <summary>
            Whether or not to return a result to the client when exceptions are thrown by the agents.
            </summary>
        </member>
        <member name="P:NKit.Utilities.SettingsFile.Default.WcfRestWebServiceAppSettings.RestClientDateTimeFormat">
            <summary>
            The date time format used in the messages being sent by the client in web requests.
            </summary>
        </member>
        <member name="P:NKit.Utilities.SettingsFile.Default.WebServiceClientAppSettings.WebServiceBaseUrl">
            <summary>
            The URL of the web service.
            </summary>
        </member>
        <member name="P:NKit.Utilities.SettingsFile.Default.WebServiceClientAppSettings.UseAuthentication">
            <summary>
            Whether or not the web service requires clients to authenticate.
            </summary>
        </member>
        <member name="P:NKit.Utilities.SettingsFile.Default.WebServiceClientAppSettings.AuthenticationDomainName">
            <summary>
            The domain name (or hostname) to be used in the credentials when authenticating against the web service.
            </summary>
        </member>
        <member name="P:NKit.Utilities.SettingsFile.Default.WebServiceClientAppSettings.AuthenticationUserName">
            <summary>
            The windows user name to be used in the credentials when authenticating against the web service. N.B. Only used if the user is not prompted for credentials.
            </summary>
        </member>
        <member name="P:NKit.Utilities.SettingsFile.Default.WebServiceClientAppSettings.AuthenticationPassword">
            <summary>
            The password of the windows user to be used in the credentials when authentication against the web service.
            </summary>
        </member>
        <member name="P:NKit.Utilities.SettingsFile.Default.WebServiceClientAppSettings.WebServiceWebRequestTimeout">
            <summary>
            The timeout in milliseconds of a web request made to the web service by the application.
            </summary>
        </member>
        <member name="P:NKit.Utilities.SettingsFile.Default.WebServiceClientAppSettings.WebServiceTextResponseEncoding">
            <summary>
            The encoding of the text response from web service. The encoding of the application and web service need to be configured to match.
            </summary>
        </member>
        <member name="P:NKit.Utilities.SettingsFile.Default.WebServiceClientAppSettings.WebServiceMessagingFormat">
            <summary>
            The format of the messages exchanged between the application and the web service e.g. XML, JSON or CSV.
            </summary>
        </member>
        <member name="P:NKit.Utilities.SettingsFile.Default.WebServiceMobileClientAppSettings.FtpBaseUri">
            <summary>
            The base URI of the FTP site.
            </summary>
        </member>
        <member name="P:NKit.Utilities.SettingsFile.Default.WcfRestWebServiceAppSettingsWindows.RestServicePerformanceCounterScope">
            <summary>
            The scope of the performance counters to enable on the service in order to view the counters with Windows perfmon.exe.
            </summary>
        </member>
        <member name="P:NKit.Utilities.SettingsFile.Settings.ApplicationName">
            <summary>
            The name of the application.
            </summary>
        </member>
        <member name="P:NKit.Utilities.SettingsFile.Settings.ShowMessageBoxOnException">
            <summary>
            Whether or not a message box should be shown when an exception occurs. This should only be enabled for Windows Forms application.
            </summary>
        </member>
        <member name="M:NKit.Utilities.SettingsFile.Settings.ToString">
            <summary>
            Queries all the settings in this class grouped by their categorires and writes the categories with each setting name and value to a string which can be logged or displayed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NKit.Utilities.SettingsFile.Settings.RemoveEscapeSequencesFromNewLineSettingValue(System.String)">
            <summary>
            When deserializing \r and \n characters in the XML will be deserialized to \\r and \\n, but the real values we want is \r and \n.
            Therefore we need to strip the escape characters on carriage returns and new line characters to get the intended value of the setting.
            This method should be after Refreshing (deserializing) from the settings file.
            </summary>
        </member>
        <member name="M:NKit.Utilities.SettingsFile.Settings.AddEscapeSequencesToNewLineSettingValue(System.String)">
            <summary>
            When serializing \r and \n characters to XML, these values will be saved as an actual new line in the XML text file when we in fact want to save
            the setting value as a \r and/or \r character. In order to achieve this, we need to add escape sequences to the carriage return and new line characters in order
            to save the intended setting values. 
            This method should be called before Saving to file (serializing).
            </summary>
        </member>
        <member name="M:NKit.Utilities.ThreadHelper.GetCurrentThreadCount(System.Int32@,System.Int32@)">
            <summary>
            Get the number of currently running threads in the CLR thread pool: https://blogs.msdn.microsoft.com/oldnewthing/20170724-00/?p=96675
            </summary>
            <returns></returns>
        </member>
        <member name="M:NKit.Utilities.ThreadHelper.GetMinimumThreadsCount(System.Int32@,System.Int32@)">
            <summary>
            Sets the minimum number of threads available in the Thread Pools (Worker Thread Pool) and IOCP (IO Completion Port) threads.
            Worker Threads vs IOCP (IO Completion Port) threads: https://www.infoworld.com/article/3201030/understand-the-net-clr-thread-pool.html 
            
            The default value of the minimum setting, which is the minimum number of both worker and IOCP threads, is determined by the number of
            processors in your system. Hence, if your system has four cores, you would have four worker threads and four IOCP threads by default. 
            </summary>
        </member>
        <member name="M:NKit.Utilities.ThreadHelper.SetMinimumThreadsCount(System.Int32,System.Int32)">
            <summary>
            Sets the minimum number of threads available in the Thread Pools (Worker Thread Pool) and IOCP (IO Completion Port) threads.
            Worker Threads vs IOCP (IO Completion Port) threads: https://www.infoworld.com/article/3201030/understand-the-net-clr-thread-pool.html 
            
            The default value of the minimum setting, which is the minimum number of both worker and IOCP threads, is determined by the number of
            processors in your system. Hence, if your system has four cores, you would have four worker threads and four IOCP threads by default. 
            
            You can set the minimum configuration values for both worker and IOCP threads to any value between one and 50. 
            A good approach is to take a user mode process dump of the IIS worker process (W3wp.exe) and then use the !threadpool command to report 
            the total number of worker threads. Once you know this value, simply divide it by the number of processor cores on your system to 
            determine the minimum worker and IOCP thread settings. For example, if the total count of worker threads is 100 and you have four 
            processors in your system, you can set the minimum values for both worker and IOCP threads to 25 i.e. each CPU should be able to handle 25 
            threads at a minimum to handle 100 threads in total at a minimum.
            </summary>
        </member>
        <member name="M:NKit.Utilities.ThreadHelper.GetTotalThreadsRunningCountInCurrentProcess">
            <summary>
            Gets the total number of running threads in the application. This will include both managed and unmanaged threads. https://stackoverflow.com/questions/10439916/find-out-how-many-threads-my-application-is-running
            </summary>
            <returns></returns>
        </member>
        <member name="T:NKit.Utilities.Vertex">
            <summary>
            A helper class containing an X and Y co-ordinate. This class can used
            instead of a .NET Point if one wants to ensure that a set of 
            co-ordinates will be serialized/deserialized successfully.
            </summary>
        </member>
        <member name="P:NKit.Utilities.Vertex.X">
            <summary>
            The X co-ordinate of the Vertex.
            </summary>
        </member>
        <member name="P:NKit.Utilities.Vertex.Y">
            <summary>
            The Y co-ordinate of the Vertex.
            </summary>
        </member>
        <member name="M:NKit.Utilities.Vertex.ToPoint">
            <summary>
            Creates a .NET Point object based on this Vertex's
            X and Y co-ordinates.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NKit.Utilities.Cab.CabBuilderWindows.BuildCab(NKit.Utilities.Cab.CabInfoWindows,System.String,System.String,System.Boolean,System.String@,System.String@)">
            <summary>
            Cab Wizard: http://msdn.microsoft.com/en-us/library/aa924359.aspx
            </summary>
            <param name="cabInfo"></param>
            <param name="outputFilePath"></param>
            <param name="cabWizFilePath"></param>
            <param name="deleteINFAfterBuild"></param>
            <returns>Returns the contents of CabWiz's log file.</returns>
        </member>
        <member name="T:NKit.Utilities.Cab.CabInfoWindows">
            <summary>
            Contains information about a CAB file in order to create a INF file to be passed to cabwiz to build a cab.
            INF format: http://msdn.microsoft.com/en-us/library/aa924478.aspx
            Creating an INF File: http://msdn.microsoft.com/en-us/library/3h8ff753(v=vs.80).aspx
            </summary>
        </member>
        <member name="M:NKit.Utilities.Cab.CabInfoWindows.#ctor(System.String,System.String,System.String,System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Contains information about a CAB file in order to create a INF file to be passed to cabwiz to build a cab.
            </summary>
            <param name="providerName">May not be passed as null or empty.</param>
            <param name="appName">May not be passed as null or empty.</param>
            <param name="manufacturer">May not be passed as null or empty.</param>
            <param name="versionMin">A null defaults the value to 4.0</param>
            <param name="versionMax">A null defaults the value to 6.99</param>
        </member>
        <member name="M:NKit.Utilities.Cab.CabInfoWindows.#ctor">
            <summary>
            Contains information about a CAB file in order to create a INF file to be passed to cabwiz to build a cab.
            </summary>
        </member>
        <member name="P:NKit.Utilities.Cab.CabInfoWindows.Item(System.String)">
            <summary>
            Get a CAB resource file with the specified file name (not the full path).
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:NKit.Utilities.Cab.CabInfoWindows.SetCESetupDll(System.String)">
            <summary>
            Set the file name (not the path) of the CESetupDLL for the CAB file. The resource file must have already been added to this CAB
            and must have a dll file extension.
            </summary>
            <param name="ceSetupDll"></param>
        </member>
        <member name="M:NKit.Utilities.Cab.CabInfoWindows.ContainsCabResource(System.String)">
            <summary>
            Pass in just the file name (not the path) to determine if the resource 
            file has already been added to be embedded into this CAB file.
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:NKit.Utilities.Cab.CabInfoWindows.ContainsCabResource(NKit.Utilities.Cab.CabResourceInfoWindows)">
            <summary>
            Pass in CabResource to determine if the resource file has already been added to be embedded into this CAB file.
            The match is done against the file name (not th path).
            </summary>
            <param name="resource"></param>
            <returns></returns>
        </member>
        <member name="M:NKit.Utilities.Cab.CabInfoWindows.AddCabResource(System.String)">
            <summary>
            Adds a file as a resource to be embedded in the CAB file. The file name (not the path) has to be unique to this CAB file.
            </summary>
            <param name="resource"></param>
        </member>
        <member name="M:NKit.Utilities.Cab.CabInfoWindows.RemoveCabResource(NKit.Utilities.Cab.CabResourceInfoWindows)">
            <summary>
            Removes a resource file from this CAB file.
            </summary>
            <param name="resource"></param>
        </member>
        <member name="M:NKit.Utilities.Cab.CabInfoWindows.ValidateCabResourcesExist">
            <summary>
            Validates that all the files resources added to the CAB actually exist.
            </summary>
        </member>
        <member name="M:NKit.Utilities.Cab.CabInfoWindows.AppendINFVersionBlock(System.Text.StringBuilder)">
            <summary>
            INF Order: 1
            </summary>
            <param name="INF"></param>
        </member>
        <member name="M:NKit.Utilities.Cab.CabInfoWindows.AppendINFCEStringBlock(System.Text.StringBuilder)">
            <summary>
            INF Order: 2
            </summary>
            <param name="INF"></param>
        </member>
        <member name="M:NKit.Utilities.Cab.CabInfoWindows.AppendINFStringsBlock(System.Text.StringBuilder)">
            <summary>
            INF Order: 3
            </summary>
            <param name="INF"></param>
        </member>
        <member name="M:NKit.Utilities.Cab.CabInfoWindows.AppendINFCEDeviceBlock(System.Text.StringBuilder)">
            <summary>
            INF Order: 4
            </summary>
            <param name="INF"></param>
        </member>
        <member name="M:NKit.Utilities.Cab.CabInfoWindows.AppendINFDefaultInstallBlock(System.Text.StringBuilder)">
            <summary>
            INF Order: 5
            </summary>
            <param name="INF"></param>
        </member>
        <member name="M:NKit.Utilities.Cab.CabInfoWindows.AppendINFSourceDisksNamesBlock(System.Text.StringBuilder)">
            <summary>
            INF Order: 7
            </summary>
            <param name="INF"></param>
        </member>
        <member name="M:NKit.Utilities.Cab.CabInfoWindows.AppendINFSourceDisksFilesBlock(System.Text.StringBuilder)">
            <summary>
            INF Order: 8
            </summary>
            <param name="INF"></param>
        </member>
        <member name="M:NKit.Utilities.Cab.CabInfoWindows.AppendINFDestinationDirsBlock(System.Text.StringBuilder)">
            <summary>
            INF Order: 9
            </summary>
            <param name="INF"></param>
        </member>
        <member name="M:NKit.Utilities.Cab.CabInfoWindows.AppendINFOperationsBlock(System.Text.StringBuilder)">
            <summary>
            INF Order: 10
            </summary>
            <param name="INF"></param>
        </member>
        <member name="M:NKit.Utilities.Cab.CabInfoWindows.AppendINFShortcuts(System.Text.StringBuilder)">
            <summary>
            INF Order: 11
            </summary>
            <param name="INF"></param>
        </member>
        <member name="M:NKit.Utilities.Cab.CabInfoWindows.AppendINFRegKeys(System.Text.StringBuilder)">
            <summary>
            INF Order: 12
            </summary>
            <param name="INF"></param>
        </member>
        <member name="M:NKit.Utilities.Cab.CabResourceInfoWindows.GetINFCopyFileOperationName">
            <summary>
            Gets just the name of the operation in the INF file responsible 
            for copying the file to the correct location on the device.
            e.g. (where 1 is the index of the file)
            
            Files.Common1
            </summary>
            <returns></returns>
        </member>
        <member name="M:NKit.Utilities.Cab.CabResourceInfoWindows.AppendINFSourceDiskNameBlock(System.Text.StringBuilder)">
            <summary>
            Gets the directory path formatted as needed to be listed the INF file.
            e.g. (where 1 is the index and C:\Program Files\Microsoft.NET\SDK\CompactFramework\v3.5\WindowsCE\ is the directory of the file)
            
            1=,"Common1",,"C:\Program Files\Microsoft.NET\SDK\CompactFramework\v3.5\WindowsCE\"
            </summary>
            <returns></returns>
        </member>
        <member name="M:NKit.Utilities.Cab.CabResourceInfoWindows.AppendINFSourceDiskFileBlock(System.Text.StringBuilder)">
            <summary>
            Gets the file name formatted as needed to be listed in the INF file.
            e.g. (where 1 is the index and NETCFv35.wm.armv4i.cab is the file name.
            
            "NETCFv35.wm.armv4i.cab"=1
            </summary>
            <returns></returns>
        </member>
        <member name="M:NKit.Utilities.Cab.CabResourceInfoWindows.AppendINFDestinationDirBlock(System.Text.StringBuilder)">
            <summary>
            Get the INF formatted line indicating the destination directory on the device where
            the file will be copied to.
            e.g. (where 1 is the index)
            
            Files.Common1=0,"%InstallDir%"
            </summary>
            <returns></returns>
        </member>
        <member name="M:NKit.Utilities.Cab.CabResourceInfoWindows.AppendINFCopyFileOperationBlock(System.Text.StringBuilder)">
            <summary>
            Get the actual operation in the INF file responsible
            for copying the file to the correct location on the device.
            e.g. (where 1 is the index and NETCFv35.wm.armv4i.cab is the file name)
            
            [Files.Common1]
            "NETCFv35.wm.armv4i.cab","NETCFv35.wm.armv4i.cab",,0
            </summary>
            <returns></returns>
        </member>
        <member name="M:NKit.Utilities.EnumHelperWindows.GetEnumValues(System.Type)">
            <summary>
            Gets an array of enums from a given enum.
            </summary>
            <param name="enumType">The enum type to check.</param>
            <returns>Returns an array of enums from a given enum.</returns>
        </member>
        <member name="T:NKit.Utilities.ExceptionHandlerWindows">
            <summary>
            A helper class for handling exceptions i.e. logging and displaying them.
            </summary>
        </member>
        <member name="M:NKit.Utilities.ExceptionHandlerWindows.GetCompleteExceptionMessage(System.Exception,System.Boolean)">
            <summary>
            Gets the complete error message including the exception message, inner exception message (if it exists) and stack trace.
            </summary>
            <param name="ex">Exception whose message to be retrieved.</param>
            <param name="includeStackTrace">Whether to include the exeption's stack trace in the message.</param>
            <returns></returns>
        </member>
        <member name="T:NKit.Utilities.InformationWindows">
            <summary>
            A helper class helps in retrieving system information.
            </summary>
        </member>
        <member name="T:NKit.Utilities.RAS.RasConnectionManagerWindows">
            <summary>
            A wrapper class for managing RAS connections e.g. VPN or dial up connections.
            </summary>
        </member>
        <member name="M:NKit.Utilities.RAS.RasConnectionManagerWindows.#ctor">
            <summary>
            Utility class for managing windows connections e.g. VPN or dial up connections.
            </summary>
        </member>
        <member name="M:NKit.Utilities.RAS.RasConnectionManagerWindows.#ctor(System.Object)">
            <summary>
            Utility class for managing windows connections e.g. VPN or dial up connections.
            </summary>
            <param name="tag">Any object to be used as a state bag.</param>
        </member>
        <member name="E:NKit.Utilities.RAS.RasConnectionManagerWindows.OnConnectionStateChanged">
            <summary>
            Event fired when the state of the a windows connection changes.
            </summary>
        </member>
        <member name="E:NKit.Utilities.RAS.RasConnectionManagerWindows.OnDialCompleted">
            <summary>
            Event fired after a dial up connection has been completed.
            </summary>
        </member>
        <member name="M:NKit.Utilities.RAS.RasConnectionManagerWindows.GetRasConnectionsAddressBookPath(DotRas.RasPhoneBookType)">
            <summary>
            Gets the path to the address book containing information about all the windows connections.
            </summary>
            <param name="phoneBookType">The type of phone book e.g. current user or all users.</param>
            <returns></returns>
        </member>
        <member name="M:NKit.Utilities.RAS.RasConnectionManagerWindows.GetRasConnectionNames">
            <summary>
            Gets the names of all the available RAS (VPN or dial up) connections.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NKit.Utilities.RAS.RasConnectionManagerWindows.CreateVPNConnectionEntry(System.String,System.Nullable{DotRas.RasVpnStrategy},System.Nullable{DotRas.RasDeviceType},System.String)">
            <summary>
            Creates a VPN connection in the Windows list of connections.
            </summary>
            <param name="vpnConnectionName">The name of the VPN connection to create.</param>
            <param name="strategy">The VPN strategy to use. If null the default strategy is used.</param>
            <param name="deviceType">The RAS (Remote Access Serice) device type. If null the default is used i.e.RasDeviceType.Vpn</param>
            <param name="deviceName">The name of the RAS device. If null the default is used i.e. "(PPTP)".</param>
        </member>
        <member name="M:NKit.Utilities.RAS.RasConnectionManagerWindows.CreateDialupConnectionEntry(System.String,System.String,System.Nullable{DotRas.RasDeviceType},System.String)">
            <summary>
            Creates a dial-up connection in the windows list of connections.
            </summary>
            <param name="dialupConnectionName">The name of the dial-up connection to create.</param>
            <param name="phoneNumber">The phone number to be dialed when dialing the dial-up connection.</param>
            <param name="deviceType">The RAS (Remote Access Serice) device type. If null the default is used i.e.RasDeviceType.Modem</param>
            <param name="deviceName">The name of the RAS device. May not be null.</param>
        </member>
        <member name="M:NKit.Utilities.RAS.RasConnectionManagerWindows.GetDevices">
            <summary>
            Gets a list of RAS devices available e.g. modems, VPN connections etc.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NKit.Utilities.RAS.RasConnectionManagerWindows.ConnectRasConnection(System.String,System.String,System.String,System.Int32,DotRas.RasPhoneBookType)">
            <summary>
            Finds the RAS connection (VPN or dial up) and asynchronously dials that connection.
            </summary>
            <param name="rasConnectionName">The name of the RAS connection e.g. MyCompanyVPN</param>
            <param name="userName">The username to specify when dialing.</param>
            <param name="password">The password to specify when dialing.</param>
            <param name="timeout">Length of time until asynchronous dialing times out..</param>
            <param name="phoneBookType">The type of phone book e.g. current user or all users.</param>
        </member>
        <member name="M:NKit.Utilities.RAS.RasConnectionManagerWindows.DisconnectRasConnection(System.String)">
            <summary>
            Disconnects a RAS connection.
            </summary>
            <param name="rasConnectionName">The name of the RAS connection e.g. MyCompanyVPN</param>
        </member>
        <member name="E:NKit.Utilities.SMS.SmsGatewayWindows.OnSmsReceived">
            <summary>
            Event fired when an SMS is received by the SMS Gateway.
            </summary>
        </member>
        <member name="M:NKit.Utilities.SMS.SmsGatewayWindows.ParseSmsReceivedNotificationMessageLine(System.String)">
            <summary>
            This method handles what happens when the modem notifies the PC when an SMS has arrived and is sitting in a 
            specific memory bank on the SIM card. After parsing the line containing memory bank details it then requests
            the modem to retrieve and write out the SMS details and message to the serial port, which will then be handled
            by the HandleSmsDetailsMessageLines method.
            </summary>
            <param name="notificationMessageLine">The line containing the infor on which memory bank the SMS is on.</param>
        </member>
        <member name="M:NKit.Utilities.SMS.SmsGatewayWindows.ParseSmsDetailsMessageLines(System.String,System.String[],System.Int32)">
            <summary>
            This method handles the parsing of the actual SMS that was retrieved from a specific memory bank on the SIM card.
            </summary>
            <param name="smsDetailsMessageLine"></param>
            <param name="allDataLinesReceived"></param>
            <param name="allDataLinesIndex"></param>
        </member>
        <member name="M:NKit.Utilities.SMS.SmsGatewayWindows.ClearSimMemoryBank(System.Int32)">
            <summary>
            Clears a memory bank of the SIM card. This should be done after an SMS has been read off a memory bank and has been handled.
            </summary>
            <param name="simMemoryBankToClear"></param>
        </member>
        <member name="M:NKit.Utilities.SMS.SmsGatewayWindows.GetDateTimeFromSmsDateTime(System.String,System.Boolean)">
            <summary>
            Parses a date sent by the modem to a .NET DateTime.
            </summary>
            <param name="receivedDateTimeRaw">The received date of the SMS given by the modem expected in this format: "13/11/01,20:18:59+08"</param>
            <param name="ignoreTimeZone">Whether to strip the timezone from the given date time i.e. not compare the provided time zone in the date time with the time zone of this machine where the code is running on.</param>
            <returns></returns>
        </member>
        <member name="M:NKit.Utilities.SMS.SmsGatewayWindows.ConfigureModemForNotificationResponseToPC">
            <summary>
            Configures the modem to send notifications to the PC when an SMS is received.
            Notifications containing info on the memory bank of the SIM card where the SMS is stored.
            These notifications will be read by this SmsGateway from a specific memory bank of the SIM card.
            </summary>
        </member>
        <member name="M:NKit.Utilities.SMS.SmsGatewayWindows.SendSms(NKit.Utilities.SMS.SmsInfoWindows)">
            <summary>
            Sends a command to the modem informing it to send an SMS to a specific cell phone number.
            </summary>
            <param name="smsInfo">The details of the SMS to send.</param>
        </member>
        <member name="T:NKit.Utilities.UIHelperWindows">
            <summary>
            A helper class for displaying message boxes.
            </summary>
        </member>
        <member name="M:NKit.Utilities.UIHelperWindows.DisplayException(System.Exception)">
            <summary>
            Displays a message box containing the message of the provided Exception
            as well as the message of the inner exception if it exists.
            </summary>
            <param name="ex">The exception whose message will be displayed.</param>
        </member>
        <member name="M:NKit.Utilities.UIHelperWindows.DisplayException(System.Exception,System.Windows.Forms.Form,System.Windows.Forms.KeyEventHandler,System.String)">
            <summary>
            Displays a message box containing the message of the provided Exception
            as well as the message of the inner exception if it exists.
            Also temporarily disables the specified form's key up event handler.
            </summary>
            <param name="ex">The exception whose message will be displayed.</param>
        </member>
        <member name="M:NKit.Utilities.UIHelperWindows.DisplayError(System.String)">
            <summary>
            Displays an error message box with the given error message.
            </summary>
            <param name="errorMessage">The error message to be displayed.</param>
        </member>
        <member name="M:NKit.Utilities.UIHelperWindows.DisplayError(System.String,System.Windows.Forms.Form,System.Windows.Forms.KeyEventHandler)">
            <summary>
            Displays an error message box with the given error message.
            Also temporarily disables the specified form's key up event handler.
            </summary>
            <param name="errorMessage">The error message to be displayed.</param>
        </member>
        <member name="M:NKit.Utilities.UIHelperWindows.DisplayInformation(System.String)">
            <summary>
            Displays an information message box with the given info message.
            </summary>
            <param name="infoMessage">The information message to be displayed.</param>
        </member>
        <member name="M:NKit.Utilities.UIHelperWindows.DisplayInformation(System.String,System.Windows.Forms.Form,System.Windows.Forms.KeyEventHandler)">
            <summary>
            Displays an information message box with the given info message. 
            Also temporarily disables the specified form's key up event handler.
            </summary>
            <param name="infoMessage">The information message to be displayed.</param>
        </member>
        <member name="M:NKit.Utilities.UIHelperWindows.DisplayWarning(System.String)">
            <summary>
            Displays a warning message box with the given warning message.
            </summary>
            <param name="warningMessage">The warning message to be displayed.</param>
        </member>
        <member name="M:NKit.Utilities.UIHelperWindows.DisplayWarning(System.String,System.Windows.Forms.Form,System.Windows.Forms.KeyEventHandler)">
            <summary>
            Displays a warning message box with the given warning message.
            Also temporarily disables the specified form's key up event handler.
            </summary>
            <param name="warningMessage">The warning message to be displayed.</param>
        </member>
        <member name="M:NKit.Utilities.UIHelperWindows.AskQuestion(System.String)">
            <summary>
            Displays question message box containing the question message and then
            returns a Dialog result of either Yes or No based on the user's selection/response.
            </summary>
            <param name="question">The question message to be displayed to the user.</param>
            <returns>Returns either a Yes or No response based on the user's selection/response.</returns>
        </member>
        <member name="M:NKit.Utilities.UIHelperWindows.AskQuestion(System.String,System.Windows.Forms.Form,System.Windows.Forms.KeyEventHandler)">
            <summary>
            Displays question message box containing the question message and then
            returns a Dialog result of either Yes or No based on the user's selection/response.
            Also temporarily disables the specified form's key up event handler.
            </summary>
            <param name="question">The question message to be displayed to the user.</param>
            <returns>Returns either a Yes or No response based on the user's selection/response.</returns>
        </member>
        <member name="M:NKit.Utilities.UIHelperWindows.AskErrorQuestion(System.String)">
            <summary>
            Displays question message box containing the question message and error icon and then
            returns a Dialog result of either Yes or No based on the user's selection/response.
            </summary>
            <param name="question">The question message to be displayed to the user.</param>
            <returns>Returns either a Yes or No response based on the user's selection/response.</returns>
        </member>
        <member name="M:NKit.Utilities.UIHelperWindows.AskErrorQuestion(System.String,System.Windows.Forms.Form,System.Windows.Forms.KeyEventHandler)">
            <summary>
            Displays question message box containing the question message and error icon and then
            returns a Dialog result of either Yes or No based on the user's selection/response.
            Also temporarily disables the specified form's key up event handler.
            </summary>
            <param name="question">The question message to be displayed to the user.</param>
            <returns>Returns either a Yes or No response based on the user's selection/response.</returns>
        </member>
        <member name="M:NKit.Utilities.UIHelperWindows.GetSelectedGridRowCellValue``1(System.Windows.Forms.DataGrid,System.Int32)">
            <summary>
            Gets the cell value of a specific column in the currently selected row of a DataGrid.
            </summary>
            <param name="grid"></param>
            <returns></returns>
        </member>
        <member name="M:NKit.Utilities.UIHelperWindows.GetSelectedDataGridViewRowCellValue``1(System.Windows.Forms.DataGridView,System.Int32)">
            <summary>
            Gets the cell value of a specific column in the currently selected row of a DataGrid.
            </summary>
            <param name="grid"></param>
            <returns></returns>
        </member>
        <member name="T:NKit.Utilities.WaitProcessWindows">
            <summary>
            A helper class for displaying a wait cursor.
            On this creation of an object of this WaiCursor class the current cursor will be set to a wait cursor.
            On calling Dispose on this object, the current cursor will set back to its default.
            This class should be used in a using clause e.g.
            
            using(WaitCursor w = new WaitCursor())
            {
                //Some code that will take some time to execute.
            }
            </summary>
        </member>
        <member name="M:NKit.Utilities.WaitProcessWindows.#ctor">
            <summary>
            A helper class for displaying a wait cursor.
            On this calling this constructor the current cursor will be set to a wait cursor.
            On calling Dispose on this object, the current cursor will set back to its default.
            </summary>
        </member>
        <member name="M:NKit.Utilities.WaitProcessWindows.Dispose">
            <summary>
            The current cursor will set back to a default cursor.
            </summary>
        </member>
        <member name="T:NKit.Web.Client.HttpVerb">
            <summary>
            The method/verb of the web request made to the web service.
            Normally corresponds to typical CRUD (Create/Read/Update/Delete) operations
            although you should not assume that it directly corresponds to SQL operations i.e. 
            it depends on how the web service was implementated to interpret the verb.
            </summary>
        </member>
        <member name="F:NKit.Web.Client.HttpVerb.GET">
            <summary>
            A get request. Normally used to query data through the web service.
            </summary>
        </member>
        <member name="F:NKit.Web.Client.HttpVerb.POST">
            <summary>
            A post request. Normally used the update data through the web service.
            However, PUT and POST are normally interchangeable depending on the
            web service implementation.
            </summary>
        </member>
        <member name="F:NKit.Web.Client.HttpVerb.PUT">
            <summary>
            A put request. Normally used to update data through the web service.
            However, PUT and POST are normally interchangeable depending on the
            web service implementation.
            </summary>
        </member>
        <member name="F:NKit.Web.Client.HttpVerb.DELETE">
            <summary>
            A delete request. Normally used to create data through the web service.
            </summary>
        </member>
        <member name="F:NKit.Web.Client.HttpVerb.HEAD">
            <summary>
            A head request.
            </summary>
        </member>
        <member name="F:NKit.Web.Client.HttpVerb.OPTIONS">
            <summary>
            An options request.
            </summary>
        </member>
        <member name="T:NKit.Web.Client.JsonWebServiceClient">
            <summary>
            A wrapper class for performing web service calls to a JSON Rest based web service.
            </summary>
        </member>
        <member name="M:NKit.Web.Client.JsonWebServiceClient.#ctor">
            <summary>
            A wrapper class for performing web service calls to a JSON Rest based web service.
            </summary>
        </member>
        <member name="M:NKit.Web.Client.JsonWebServiceClient.#ctor(System.String)">
            <summary>
            A wrapper class for performing web service calls to a JSON Rest based web service.
            </summary>
            <param name="webServiceBaseUrl">The base URL for the REST web service e.g. http://www.mydomains.com/api</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:NKit.Web.Client.JsonWebServiceClient.CallService``1(System.String,System.Object,NKit.Web.Client.HttpVerb,System.Boolean,System.Int32,System.Net.HttpStatusCode@,System.String@,System.Boolean,System.Collections.Generic.Dictionary{System.String,System.String})" -->
        <!-- Badly formed XML comment ignored for member "M:NKit.Web.Client.JsonWebServiceClient.CallService``1(System.String,System.Object,NKit.Web.Client.HttpVerb,System.Boolean,System.String,System.Int32,System.String,System.Net.HttpStatusCode@,System.String@,System.Boolean,System.Collections.Generic.Dictionary{System.String,System.String})" -->
        <!-- Badly formed XML comment ignored for member "M:NKit.Web.Client.JsonWebServiceClient.CallService``1(System.String,System.Object,NKit.Web.Client.HttpVerb,System.String@,System.Boolean,System.Boolean,System.String,System.Int32,System.String,System.Net.HttpStatusCode@,System.String@,System.Boolean,System.Collections.Generic.Dictionary{System.String,System.String})" -->
        <member name="T:NKit.Web.Client.REST.RestWebServiceClient">
            <summary>
            A web service client wrapper that can be used to talk with a REST service on a web server.
            N.B. A REST web service needs to exist on the web server with methods matching those expected by this RestWebService.
            </summary>
        </member>
        <member name="M:NKit.Web.Client.REST.RestWebServiceClient.GetAllEntities``1">
            <summary>
            Gets all the entities of a REST web service according to this patern: baseURL/{entityName}
            e.g. http://hostname:1983/User to get all users.
            </summary>
            <typeparam name="E">The name of the entities to get e.g. User</typeparam>
            <returns>A list of the specified entities i.e. a list of users.</returns>
        </member>
        <member name="M:NKit.Web.Client.REST.RestWebServiceClient.GetEntityById``1(System.Object)">
            <summary>
            Gets a specific entity based on its surrogate key according to this pattern: baseURL/{entityName}/{entityId}
            e.g. http://hostname:1983/User/3 to get a user with the user ID of 3.
            </summary>
            <typeparam name="E">The name of the entity to get e.g. User</typeparam>
            <param name="entityId"></param>
            <returns>The entity.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:NKit.Web.Client.REST.RestWebServiceClient.GetEntitiesByField``1(System.String,System.Object)" -->
        <member name="M:NKit.Web.Client.REST.RestWebServiceClient.PutEntity``1(``0)">
            <summary>
            Puts an entity to the REST web service according to this pattern: baseURL/{baseURL} with the entity serialized into the body of the web request.
            e.g. http://hostname:1983/User 
            </summary>
            <typeparam name="E">The name of the entity to put e.g. User</typeparam>
            <param name="e">The entity to put.</param>
            <returns>The server response message.</returns>
        </member>
        <member name="M:NKit.Web.Client.REST.RestWebServiceClient.PostEntity``1(``0)">
            <summary>
            Posts an entity to the REST web service according to this pattern: baseURL/{baseURL} with the entity serialized into the body of the web request.
            e.g. http://hostname:1983/User 
            </summary>
            <typeparam name="E">The name of the entity to post e.g. User</typeparam>
            <param name="e">The entity to post.</param>
            <returns>The server response message.</returns>
        </member>
        <member name="M:NKit.Web.Client.REST.RestWebServiceClient.DeleteById``1(System.Object)">
            <summary>
            Deletes an entity with the specified ID on the REST web service according to this pattern: baseURL/{entityName}/{entityId}
            e.g. http://hostname:1983/User/3 to delete a user with the user ID of 3.
            </summary>
            <typeparam name="E">The name of the entity to delete e.g. User.</typeparam>
            <param name="entityId">The ID of the entity to be deleted.</param>
            <returns>The server response message.</returns>
        </member>
        <member name="T:NKit.Web.Client.WebServiceClient">
            <summary>
            A wrapper class for performing web requests/calls calls to a service (or any other web resource).
            </summary>
        </member>
        <member name="M:NKit.Web.Client.WebServiceClient.#ctor">
            <summary>
            A wrapper class for performing web requests/calls calls to a service (or any other web resource).
            </summary>
        </member>
        <member name="M:NKit.Web.Client.WebServiceClient.#ctor(System.String)">
            <summary>
            A wrapper class for performing web requests/calls calls to a service (or any other web resource).
            </summary>
            <param name="webServiceBaseUrl">The base URL to be used for web requests e.g. http://www.mydomains.com/api</param>
        </member>
        <member name="M:NKit.Web.Client.WebServiceClient.#ctor(System.String,System.String)">
            <summary>
            A wrapper class for performing web requests/calls calls to a service (or any other web resource).
            </summary>
            <param name="name">The name of the web service to used to identify it in perhaps an entity cache.</param>
            <param name="webServiceBaseUrl">The base URL to be used for web requests e.g. http://www.mydomains.com/api</param>
        </member>
        <member name="P:NKit.Web.Client.WebServiceClient.Name">
            <summary>
            The name of the web service to used to identify it in perhaps an entity cache.
            </summary>
        </member>
        <member name="P:NKit.Web.Client.WebServiceClient.WebServiceBaseUrl">
            <summary>
            The base URL to be used for web requests e.g. http://www.mydomains.com/api
            </summary>
        </member>
        <member name="P:NKit.Web.Client.WebServiceClient.NetworkCredential">
            <summary>
            The network credential (domain, user name, password) to use if using basic authentication to authenticate against a web service."
            Setting this property will cause the web request made to the service to attempt to auhenticate, otherwise if this property is null, no authentication will be applied to the web request.
            </summary>
        </member>
        <member name="M:NKit.Web.Client.WebServiceClient.ConnectionTest(System.Int32,System.Net.HttpStatusCode@,System.String@,System.Boolean,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Performs a GET operation to the server at the base URL to determine if it can reach the server.
            If a WebException is thrown and its status is connection failure or if the inner exception is a socket exception 
            then the exception is thrown i.e. could not connect to server. Otherwise the WebException is swallowed e.g. a 404 
            (page not found) WebException could have be thrown, but it still indicates that the web server is online.
            </summary>
            <param name="timeout">The timeout of the web request</param>
        </member>
        <member name="M:NKit.Web.Client.WebServiceClient.ConnectionTest(System.String@,System.Int32,System.Net.HttpStatusCode@,System.String@,System.Boolean,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Performs a GET operation to the server at the base URL to determine if it can reach the server
            If a WebException is thrown and its status is connection failure or if the inner exception is a socket exception 
            then the exception is thrown i.e. could not connect to server. Otherwise the WebException is swallowed e.g. a 404 
            (page not found) WebException could have be thrown, but it still indicates that the web server is online.
            It also returns the text output from the web request.
            </summary>
            <param name="textOutput">The text output from the web request will be placed in this output parameter.</param>
            <param name="timeout">The timeout of the web request</param>
        </member>
        <member name="M:NKit.Web.Client.WebServiceClient.ConnectionTest(System.String,System.Int32,System.Net.HttpStatusCode@,System.String@,System.Boolean,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Performs a GET operation to the server at the query string appended to the base URL to
            determine if it can reach the server.
            If a WebException is thrown and its status is connection failure or if the inner exception is a socket exception 
            then the exception is thrown i.e. could not connect to server. Otherwise the WebException is swallowed e.g. a 404 
            (page not found) WebException could have be thrown, but it still indicates that the web server is online.
            It also returns the text output from the web request.
            </summary>
            <param name="queryString">The string to append to the base url making up the complete URL where the web request will be made to.</param>
            <param name="timeout">The timeout of the web request</param>
        </member>
        <member name="M:NKit.Web.Client.WebServiceClient.ConnectionTest(System.String,System.String@,System.Int32,System.Net.HttpStatusCode@,System.String@,System.Boolean,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Performs a GET operation to the server at the query string appended to the base URL to
            determine if it can reach the server.
            If a WebException is thrown and its status is connection failure or if the inner exception is a socket exception 
            then the exception is thrown i.e. could not connect to server. Otherwise the WebException is swallowed e.g. a 404 
            (page not found) WebException could have be thrown, but it still indicates that the web server is online.
            </summary>
            <param name="queryString">The string to append to the base url making up the complete URL where the web request will be made to.</param>
            <param name="textOutput">The text output from the web request will be placed in this output parameter.</param>
            <param name="timeout">The timeout of the web request</param>
        </member>
        <member name="M:NKit.Web.Client.WebServiceClient.CallService(System.String,System.String,NKit.Web.Client.HttpVerb,System.String,System.Int32,System.String,System.Net.HttpStatusCode@,System.String@,System.Boolean,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Performs a web request to a URL made of the query string appended to the base URL
            and applying the given HTTP verb. If requestPostString to be posted is not null 
            it will be included in the web request to the service. It then returns the text it
            receives from the web service.
            </summary>
            <param name="queryString">The string that will be appended to the end of the Web Service Base URL.</param>
            <param name="requestPostString">The text to be posted to the service.</param>
            <param name="verb">The HTTP verb to be applied to the web request.</param>
            <param name="setContentType">Whether the Content Type to the wb request should be set to the next parameter i.e. contentType</param>
            <param name="contentType">The type of content for the web request.</param>
            <param name="timeout">The timeout of the web request</param>
            <returns></returns>
        </member>
        <member name="T:NKit.Web.MimeContentType">
            <summary>
            MIME Content Types: http://webdesign.about.com/od/multimedia/a/mime-types-by-content-type.htm
            Application Content Types: http://www.iana.org/assignments/media-types/application/index.html
            </summary>
        </member>
        <member name="P:NKit.Web.MVC.Models.ConfirmationModel.PostBackControllerAction">
            <summary>
            The controller action that the confirmation dialog needs to be posted back to.
            </summary>
        </member>
        <member name="P:NKit.Web.MVC.Models.ConfirmationModel.PostBackControllerName">
            <summary>
            The controller that the confirmation dialog needs to be posted back to.
            </summary>
        </member>
        <member name="P:NKit.Web.MVC.Models.ConfirmationModel.DialogDivId">
            <summary>
            The HTML div element that encapsulates the confirmation dialog.
            </summary>
        </member>
        <member name="P:NKit.Web.MVC.Models.ConfirmationModel.Identifier">
            <summary>
            To be used when confirming for a single entity.
            </summary>
        </member>
        <member name="P:NKit.Web.MVC.Models.ConfirmationModel.SearchText">
            <summary>
            It is the search text specified by the user. To be used when confirming for multiple entities. i.e. used to find the entities.
            </summary>
        </member>
        <member name="P:NKit.Web.MVC.Models.ConfirmationModel.StartDate">
            <summary>
            To be used when confirming for multiple entities in a date range.
            </summary>
        </member>
        <member name="P:NKit.Web.MVC.Models.ConfirmationModel.EndDate">
            <summary>
            To be used when confirming for multiple entities in a date range.
            </summary>
        </member>
        <member name="P:NKit.Web.MVC.Models.ConfirmationModel.ConfirmationMessage">
            <summary>
            The confirmation message in the confirmation dialog to be presented to the user i.e. the question being asked.
            </summary>
        </member>
        <member name="P:NKit.Web.MVC.Models.ConfirmationModel.ParentId">
            <summary>
            The ID of the parent i.e. to be used when a group of entities belonging to a parent is loaded and needs to be identified/deleted.
            </summary>
        </member>
        <member name="P:NKit.Web.MVC.Models.ConfirmationModel.ParentCaption">
            <summary>
            A description of the parent to be used when a group of entities belonging to a parent is loaded and needs to be identified/deleted.
            </summary>
        </member>
        <member name="P:NKit.Web.MVC.Models.ConfirmationModel.SecondParentId">
            <summary>
            The ID of the second parent i.e. to be used when a group of entities belonging to a parent is loaded and needs to be identified/deleted.
            </summary>
        </member>
        <member name="P:NKit.Web.MVC.Models.ConfirmationModel.SecondParentCaption">
            <summary>
            A description of the second parent to be used when a group of entities belonging to a second parent is loaded and needs to be identified/deleted.
            </summary>
        </member>
        <member name="P:NKit.Web.MVC.Models.ConfirmationModel.ShowWaitDialog">
            <summary>
            Whether or not to display a wait dialog while posting back to the PostBackControllerAction.
            </summary>
        </member>
        <member name="P:NKit.Web.MVC.Models.ConfirmationModel.WaitMessage">
            <summary>
            The wait message to display on the wait dialog.
            </summary>
        </member>
        <member name="P:NKit.Web.MVC.Models.ConfirmationModel.WaitDialogSuccessMessage">
            <summary>
            The message to display after wait dialog has been closed after a successful postback to the PostBackControllerAction.
            </summary>
        </member>
        <member name="P:NKit.Web.MVC.Models.FilterModelStandard`1.TotalCount">
            <summary>
            Total Records
            </summary>
        </member>
        <member name="P:NKit.Web.MVC.Models.FilterModelStandard`1.TotalTableCount">
            <summary>
            
            </summary>
        </member>
        <member name="P:NKit.Web.MVC.Models.InformationModel.PostBackControllerAction">
            <summary>
            The controller action that the confirmation dialog needs to be posted back to.
            </summary>
        </member>
        <member name="P:NKit.Web.MVC.Models.InformationModel.PostBackControllerName">
            <summary>
            The controller that the confirmation dialog needs to be posted back to.
            </summary>
        </member>
        <member name="P:NKit.Web.MVC.Models.InformationModel.DialogDivId">
            <summary>
            The HTML div element that encapsulates the confirmation dialog.
            </summary>
        </member>
        <member name="P:NKit.Web.MVC.Models.InformationModel.InformationMessage">
            <summary>
            The message to display on the wait dialog.
            </summary>
        </member>
        <member name="P:NKit.Web.MVC.Models.InformationModel.Identifier">
            <summary>
            To be used when confirming for a single entity.
            </summary>
        </member>
        <member name="P:NKit.Web.MVC.Models.WaitModel.PostBackControllerAction">
            <summary>
            The controller action that the confirmation dialog needs to be posted back to.
            </summary>
        </member>
        <member name="P:NKit.Web.MVC.Models.WaitModel.PostBackControllerName">
            <summary>
            The controller that the confirmation dialog needs to be posted back to.
            </summary>
        </member>
        <member name="P:NKit.Web.MVC.Models.WaitModel.DialogDivId">
            <summary>
            The HTML div element that encapsulates the confirmation dialog.
            </summary>
        </member>
        <member name="P:NKit.Web.MVC.Models.WaitModel.WaitMessage">
            <summary>
            The message to display on the wait dialog.
            </summary>
        </member>
        <member name="P:NKit.Web.MVC.Models.WaitModel.Identifier">
            <summary>
            To be used when confirming for a single entity.
            </summary>
        </member>
        <member name="T:NKit.Mmc.Forms.SettingsControlWindows">
            <summary>
            Form container for a ListView control 
            </summary>
        </member>
        <member name="M:NKit.Mmc.Forms.SettingsControlWindows.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:NKit.Mmc.Forms.SettingsControlWindows.Microsoft#ManagementConsole#IFormViewControl#Initialize(Microsoft.ManagementConsole.FormView)">
            <summary>
            Cache the associated Form View and add the actions
            </summary>
            <param name="parentSelectionFormView">Containing form</param>
                    
        </member>
        <member name="M:NKit.Mmc.Forms.SettingsControlWindows.RefreshData">
            <summary>
            Populate the list with sample data
            </summary>
            <param name="users">array of user data to add to the list</param>
        </member>
        <member name="M:NKit.Mmc.Forms.SettingsControlWindows.GetSelectedSetting">
            <summary>
            Build string of selected users
            </summary>
            <returns></returns>
        </member>
        <member name="M:NKit.Mmc.Forms.SettingsControlWindows.lstvSettings_SelectedIndexChanged(System.Object,System.EventArgs)">
            <summary>
            Updates the FormView's selected data context when the user clicks on a setting.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:NKit.Mmc.Forms.SettingsControlWindows.lstvSettings_MouseClick(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Handle mouseclick and use MMC to show context menu if necessary 
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="F:NKit.Mmc.Forms.SettingsControlWindows.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:NKit.Mmc.Forms.SettingsControlWindows.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:NKit.Mmc.Forms.SettingsControlWindows.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:NKit.Mmc.Forms.SettingsFormViewWindows">
            <summary>
            FormView to display Winforms controls
            </summary>
        </member>
        <member name="M:NKit.Mmc.Forms.SettingsFormViewWindows.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:NKit.Mmc.Forms.SettingsFormViewWindows.OnInitialize(Microsoft.ManagementConsole.AsyncStatus)">
            <summary>
            Handle any setup necessary
            </summary>
            <param name="status">asynchronous status for updating the console</param>
        </member>
        <member name="M:NKit.Mmc.Forms.SettingsFormViewWindows.OnSelectionAction(Microsoft.ManagementConsole.Action,Microsoft.ManagementConsole.AsyncStatus)">
            <summary>
            Handle triggered action
            </summary>
            <param name="action">triggered action</param>
            <param name="status">asynchronous status to update console</param>
        </member>
        <member name="M:NKit.Mmc.Forms.SettingsFormViewWindows.OnAddPropertyPages(Microsoft.ManagementConsole.PropertyPageCollection)">
            <summary>
            OnAddPropertyPages is used to get the property pages to show. 
            (triggered by SelectionData.ShowPropertySheet)
            </summary>
            <param name="propertyPageCollection">property pages</param>
        </member>
        <member name="M:NKit.Mmc.SettingEditors.EditBoolSettingControlWindows.RefreshData(System.Object)">
            <summary>
            Populate control values from the SelectionObject (set in UserListView.SelectionOnChanged) The node is the node being updated.
            This method sets the default values on the controls.
            </summary>
        </member>
        <member name="M:NKit.Mmc.SettingEditors.EditBoolSettingControlWindows.CanApplyChanges">
            <summary>
            Check during UserProptertyPage.OnApply to ensure that changes can be Applied i.e. verify values entered from the user.
            </summary>
            <returns>returns true if changes are valid</returns>
        </member>
        <member name="M:NKit.Mmc.SettingEditors.EditBoolSettingControlWindows.UpdateData(System.Object)">
            <summary>
            Update the node with the controls values.
            </summary>
            <param name="userNode">Node being updated by property page</param>
        </member>
        <member name="M:NKit.Mmc.SettingEditors.EditBoolSettingControlWindows.chkValue_CheckedChanged(System.Object,System.EventArgs)">
            <summary>
            Notifies/Flags the PropertyPage that info has changed and that the PropertySheet can change the 
            buttons.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="F:NKit.Mmc.SettingEditors.EditBoolSettingControlWindows.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:NKit.Mmc.SettingEditors.EditBoolSettingControlWindows.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:NKit.Mmc.SettingEditors.EditBoolSettingControlWindows.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:NKit.Mmc.SettingEditors.EditEnumSettingControlWindows.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:NKit.Mmc.SettingEditors.EditEnumSettingControlWindows.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:NKit.Mmc.SettingEditors.EditEnumSettingControlWindows.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:NKit.Mmc.SettingEditors.EditLongSettingControlWindows.RefreshData(System.Object)">
            <summary>
            Populate control values from the SelectionObject (set in UserListView.SelectionOnChanged) The node is the node being updated.
            This method sets the default values on the controls.
            </summary>
        </member>
        <member name="M:NKit.Mmc.SettingEditors.EditLongSettingControlWindows.CanApplyChanges">
            <summary>
            Check during UserProptertyPage.OnApply to ensure that changes can be Applied i.e. verify values entered from the user.
            </summary>
            <returns>returns true if changes are valid</returns>
        </member>
        <member name="M:NKit.Mmc.SettingEditors.EditLongSettingControlWindows.UpdateData(System.Object)">
            <summary>
            Update the node with the controls values.
            </summary>
            <param name="userNode">Node being updated by property page</param>
        </member>
        <member name="M:NKit.Mmc.SettingEditors.EditLongSettingControlWindows.txtValue_TextChanged(System.Object,System.EventArgs)">
            <summary>
            Notifies/Flags the PropertyPage that info has changed and that the PropertySheet can change the 
            buttons.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="F:NKit.Mmc.SettingEditors.EditLongSettingControlWindows.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:NKit.Mmc.SettingEditors.EditLongSettingControlWindows.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:NKit.Mmc.SettingEditors.EditLongSettingControlWindows.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:NKit.Mmc.SettingEditors.EditSettingPage.OnApply">
            <summary>
            Sent to every page in the property sheet to indicate that the user has clicked 
            the Apply button and wants all changes to take effect.
            </summary>
        </member>
        <member name="M:NKit.Mmc.SettingEditors.EditSettingPage.OnOK">
            <summary>
            Sent to every page in the property sheet to indicate that the user has clicked the OK 
            or Close button and wants all changes to take effect.
            </summary>
        </member>
        <member name="M:NKit.Mmc.SettingEditors.EditSettingPage.OnCancel">
            <summary>
            Indicates that the user wants to cancel the property sheet.
            Default implementation allows cancel operation.
            </summary>
        </member>
        <member name="M:NKit.Mmc.SettingEditors.EditSettingPage.OnDestroy">
            <summary>
            Notifies a page that the property sheet is getting destoyed. 
            Use this notification message as an opportunity to perform cleanup operations.
            </summary>
        </member>
        <member name="M:NKit.Mmc.SettingEditors.EditTextSettingControlWindows.RefreshData(System.Object)">
            <summary>
            Populate control values from the SelectionObject (set in UserListView.SelectionOnChanged). The node is the node being updated.
            This method sets the default values on the controls.
            </summary>
        </member>
        <member name="M:NKit.Mmc.SettingEditors.EditTextSettingControlWindows.CanApplyChanges">
            <summary>
            Check during UserProptertyPage.OnApply to ensure that changes can be Applied i.e. verify values entered from the user.
            </summary>
            <returns>returns true if changes are valid</returns>
        </member>
        <member name="M:NKit.Mmc.SettingEditors.EditTextSettingControlWindows.UpdateData(System.Object)">
            <summary>
            Update the node with the controls values.
            </summary>
            <param name="userNode">Node being updated by property page</param>
        </member>
        <member name="M:NKit.Mmc.SettingEditors.EditTextSettingControlWindows.txtValue_TextChanged(System.Object,System.EventArgs)">
            <summary>
            Notifies/Flags the PropertyPage that info has changed and that the PropertySheet can change the 
            buttons.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="F:NKit.Mmc.SettingEditors.EditTextSettingControlWindows.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:NKit.Mmc.SettingEditors.EditTextSettingControlWindows.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:NKit.Mmc.SettingEditors.EditTextSettingControlWindows.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:NKit.Winforms.BorderlessFormWindows.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="F:NKit.Winforms.BorderlessFormWindows.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:NKit.Winforms.BorderlessFormWindows.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:NKit.Winforms.CustomDataGridViewWindows.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:NKit.Winforms.CustomDataGridViewWindows.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:NKit.Winforms.CustomDataGridViewWindows.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:NKit.Winforms.CustomListBoxWindows.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:NKit.Winforms.CustomListBoxWindows.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:NKit.Winforms.CustomListBoxWindows.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:NKit.Winforms.CustomMainMenuWindows.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:NKit.Winforms.CustomMainMenuWindows.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:NKit.Winforms.CustomMainMenuWindows.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:NKit.Winforms.CustomProgressBarWindows.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:NKit.Winforms.CustomProgressBarWindows.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:NKit.Winforms.CustomProgressBarWindows.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:NKit.Winforms.CustomTabWindows.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:NKit.Winforms.CustomTabWindows.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:NKit.Winforms.CustomTabWindows.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:NKit.Winforms.CustomToolStripWindows.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:NKit.Winforms.CustomToolStripWindows.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:NKit.Winforms.CustomToolStripWindows.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:NKit.Winforms.CustomTreeViewWindows.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:NKit.Winforms.CustomTreeViewWindows.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:NKit.Winforms.CustomTreeViewWindows.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:NKit.Winforms.GradientButtonWindows.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:NKit.Winforms.GradientButtonWindows.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:NKit.Winforms.GradientButtonWindows.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:NKit.Winforms.GradientLabelWindows.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:NKit.Winforms.GradientLabelWindows.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:NKit.Winforms.GradientLabelWindows.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:NKit.Winforms.GradientPanelWindows.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:NKit.Winforms.GradientPanelWindows.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:NKit.Winforms.GradientPanelWindows.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
    </members>
</doc>
